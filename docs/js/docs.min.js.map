{"version":3,"file":"docs.min.js","sources":["../../api/js/observer.js","../../api/js/scroller.js","../../createEvent.js","../../isString.js","../../isElement.js","../../getListeners.js","../../enum.js","../../_off.js","../../_delete.js","../../purgeElement.js","../../isFunction.js","../../_typeof.js","../../off.js","../../matches.js","../../getParentOrHost.js","../../resolveTextNode.js","../../getTarget.js","../../on.js","../../closest.js","../../isIE.js","../../getTypes.js","../../getScroll.js","../../getPageX.js","../../getScrollLeft.js","../../getPageY.js","../../getScrollTop.js","../../getCharCode.js","../../isAppleSafari.js","../../preventDefault.js","../../stopPropagation.js","../../stopEvent.js","../../emitter.js","../../hasEvent.js","../../getPageXY.js","../../getRelatedTarget.js","../../destroy.js","../../once.js","../../focusin.js","../../focusout.js","../../trigger.js","../../stopImmediate.js","../../delegate.js","../../api/js/anchors.js","../../api/js/buttons.js","../../api/js/docs.js","../../api/js/main.js"],"sourcesContent":["const $observer = {\n  topics: Object.create(null),\n  emit(event, data) {\n    const topics = this.topics\n    const events = topics[event] || []\n    events.forEach((handler) => {\n      handler(data)\n    })\n  },\n  on(event, handler) {\n    const topics = this.topics\n\n    if (!topics[event]) {\n      topics[event] = []\n    }\n\n    topics[event].push(handler)\n  },\n  off(event, handler) {\n    const topics = this.topics\n    const events = topics[event] || []\n    const i = events.findIndex((h) => {\n      return h === handler\n    })\n\n    if (i > -1) {\n      topics[event].splice(i, 1)\n    }\n  }\n}\n\nexport default $observer\n","import $observer from './observer'\n\nconst $main = document.querySelector('#main')\nconst MIN = 0\nconst MAX = $main.scrollHeight\nlet timer = null\nlet playing = false\n\nconst scrollTo = (top, speed = 100) => {\n  let scrollTop = $main.scrollTop\n  const distance = top - scrollTop\n  const step = Math.ceil(distance / 15)\n  const scroll = () => {\n    if (timer) {\n      clearTimeout(timer)\n    }\n\n    scrollTop += step\n\n    if (\n      (scrollTop <= top && distance < 0) ||\n      (scrollTop >= top && distance > 0)\n    ) {\n      scrollTop = top\n      playing = false\n    }\n\n    $main.scrollTop = scrollTop\n\n    if (!playing) {\n      clearTimeout(timer)\n      timer = null\n      $observer.emit('buttons:toggle', scrollTop)\n      return false\n    } else {\n      timer = setTimeout(scroll, speed)\n    }\n  }\n\n  if (playing) {\n    clearTimeout(timer)\n    timer = null\n    playing = false\n\n    return false\n  }\n\n  playing = true\n\n  scroll()\n}\n\nconst sync = () => {\n  const Observer = new IntersectionObserver(\n    (entries) => {\n      entries.forEach((entry) => {\n        if (entry.intersectionRatio > 0) {\n          $observer.emit('sync:anchor', entry.target.getAttribute('id'))\n        }\n      })\n    },\n    {\n      root: $main\n    }\n  )\n\n  $main.querySelectorAll('.section__h3').forEach((section) => {\n    Observer.observe(section)\n  })\n}\n\nconst onScrollToTop = (speed) => {\n  scrollTo(MIN, speed)\n}\nconst onScrollToBottom = (speed) => {\n  scrollTo(MAX, speed)\n}\n\nconst onScrollToMethod = (method) => {\n  const $method = document.querySelector(`#${method}`)\n  scrollTo($method.offsetTop)\n}\n\nconst setup = () => {\n  sync()\n\n  $observer.on('scroll:to:top', onScrollToTop)\n  $observer.on('scroll:to:bottom', onScrollToBottom)\n  $observer.on('scroll:to:method', onScrollToMethod)\n}\n\nexport default {\n  setup\n}\n","/**\n * 创建自定义事件（CustomerEvent）\n * ========================================================================\n * @method createEvent\n * @param {String} type - （必须）事件类型（名称）\n * @param {Object} [detail] - （可选）传递给自定义事件的数据，默认为 null\n * @param {Boolean} [bubbles] - （可选）是否支持冒泡，默认为 true\n * @param {Boolean} [cancelable] - （可选）是否可以取消，默认为 true\n * @returns {CustomEvent} - CustomerEvent 实例\n *\n * @example\n * <div id=\"nav\" class=\"nav\">\n *   <a id=\"service\" class=\"anchor\" href=\"https://www.yaohaixiao.com/serivce\">Service</a>\n *   <a id=\"help\" class=\"anchor\" href=\"https://www.yaohaixiao.com/help\">Help</a>\n * </div>\n *\n * const $nav = document.querySelector('#nav')\n * const logEvent = createEvent('log', {\n *   name: 'Yao',\n *   hi() {\n *     console.log('hi！！！')\n *   }\n * })\n *\n * const logHandler = function(evt) {\n *   console.log('detail', evt.detail)\n *   console.log('type', evt.type)\n * }\n *\n * $nav.addEventListener('log', logHandler)\n *\n * $nav.dispatchEvent(logEvent)\n */\nconst createEvent = (\n  type,\n  detail = null,\n  bubbles = true,\n  cancelable = true\n) => {\n  return new CustomEvent(type, {\n    detail: detail,\n    bubbles: bubbles,\n    cancelable: cancelable\n  })\n}\n\nexport default createEvent\n","/**\n * 判断是否为 String 类型值\n * ========================================================================\n * @method isString\n * @param {*} val - （必须）待检测的字符串\n * @returns {Boolean}\n */\nconst isString = (val) => {\n  return typeof val === 'string'\n}\n\nexport default isString\n","/**\n * 检测是否为 HTMLElement 元素节点\n * ========================================================================\n * @method isElement\n * @param {*|HTMLElement} el - （必须）待检测的数据（DOM 元素）\n * @returns {Boolean}\n */\nconst isElement = (el) => {\n  return !!(el && el.nodeName && el.tagName && el.nodeType === 1)\n}\n\nexport default isElement\n","import isString from './isString'\n\n/**\n * 获取 DOM 元素（type 事件类型）事件绑定信息\n * ========================================================================\n * 如果设置了事件类型 type， 则返回指定类型的事件绑定信息，否则返回所有事件绑定信息\n * ========================================================================\n * @methods getListeners\n * @param {HTMLElement} el - （必须）要获取事件绑定信息的 DOM 元素\n * @param {String} [type] - （可选）事件类型\n * @returns {Array} - 已绑定的事件信息\n */\nconst getListeners = (el, type) => {\n  let listeners = el._listeners || []\n\n  if (isString(type) && type) {\n    listeners = listeners.filter((listener) => {\n      return listener.type === type\n    })\n  }\n\n  return listeners\n}\n\nexport default getListeners\n","export const CAPTURE_EVENTS = [\n  'focusout',\n  'blur',\n  'focusin',\n  'focus',\n  'load',\n  'unload',\n  'mouseenter',\n  'mouseleave'\n]\n","import { CAPTURE_EVENTS } from './enum'\nimport _delete from './_delete'\n\n/**\n * （私有方法）取消 type 类型的代理事件绑定\n * ========================================================================\n * 如果没有设置 handler，则销毁 this.$options 绑定的所有符合 type 事件类型的事件绑定\n * ========================================================================\n * @method _off\n * @param {HTMLElement} el - （必须）取消事件绑定的 DOM 元素\n * @param {String} type - （必须）事件类型\n * @param {Function} fn - （必须）事件处理器回调函数\n * @private\n */\nconst _off = (el, type, fn) => {\n  const capture = CAPTURE_EVENTS.indexOf(type) > -1\n\n  /* istanbul ignore else */\n  if (fn._delegateListener) {\n    fn = fn._delegateListener\n    delete fn._delegateListener\n  }\n\n  // 移除缓存的 _listeners 数据\n  _delete(el, type, fn)\n\n  el.removeEventListener(type, fn, capture)\n}\n\nexport default _off\n","/**\n * 删除 DOM 元素缓存的 _listeners 数据\n * ========================================================================\n * @method _delete\n * @param {HTMLElement} el - 要删除 listener 的 DOM 元素\n * @param {String} type - 事件类型（名称）\n * @param {Function} [fn] - 事件处理器回调函数\n */\nconst _delete = function (el, type, fn) {\n  const listeners = el._listeners\n  let index = -1\n\n  if (listeners.length < 1) {\n    return false\n  }\n\n  // 移除缓存的 _listeners 数据\n  listeners.forEach((listener, i) => {\n    const handler = listener.fn\n\n    if (type === listener.type) {\n      index = i\n\n      if (handler === fn) {\n        index = i\n      }\n    }\n  })\n\n  /* istanbul ignore else */\n  if (index > -1) {\n    listeners.splice(index, 1)\n  }\n}\n\nexport default _delete\n","import isString from './isString'\nimport isElement from './isElement'\nimport getListeners from './getListeners'\nimport _off from './_off'\n\n/**\n * 销毁（type 类型的）代理事件绑定\n * ========================================================================\n * 1. 设置了事件类型 type，则销毁指定类型的事件绑定，否则清除所有代理事件绑定\n * 2. recurse 设置为 true，递归销毁子节点全部事件绑定\n * ========================================================================\n * @method purgeElement\n * @param {HTMLElement|String} el - （必须）DOM 元素或者其选择器\n * @param {String|Boolean} type - （必须）事件类型\n * @param {Boolean} [recurse] - （可选）是否递归销毁子节点所有事件绑定\n */\nconst purgeElement = function (el, type, recurse = false) {\n  const $element = isString(el) ? document.querySelector(el) : el\n  const $children = $element.childNodes\n  const listeners = getListeners($element, type)\n\n  listeners.forEach((listener) => {\n    _off($element, listener.type, listener.fn)\n  })\n\n  if (\n    (recurse || type === true || arguments.length === 1) &&\n    $element &&\n    $children\n  ) {\n    $children.forEach(($child) => {\n      if (isElement($child)) {\n        purgeElement($child, type, recurse)\n      }\n    })\n  }\n}\n\nexport default purgeElement\n","import _typeof from './_typeof'\n\n/**\n * 检测测试数据是否为 Function 类型\n * ========================================================================\n * @method isFunction\n * @param {*} val - （必须）待检测的数据\n * @returns {boolean} 'val' 是 Function 类型返回 true，否则返回 false\n */\nconst isFunction = (val) => {\n  return typeof val === 'function' || _typeof(val) === '[object Function]'\n}\n\nexport default isFunction\n","/**\n * 返回检测数据调用 toString() 方法后的字符串，用以判断数据类型。\n * ========================================================================\n * @method _typeof\n * @param {*} val - （必须）待检测的数据\n * @returns {String}\n *\n * @example\n * _typeof({})\n * // => '[object Object]'\n *\n * _typeof(function(){})\n * // => '[object Function]'\n *\n * _typeof([])\n * // => '[object Array]'\n *\n * _typeof('')\n * // => '[object String]'\n *\n * _typeof(2)\n * // => '[object Number]'\n */\nconst _typeof = (val) => {\n  return Object.prototype.toString.apply(val)\n}\n\nexport default _typeof\n","import purgeElement from './purgeElement'\nimport isFunction from './isFunction'\nimport _off from './_off'\n\n/**\n * 取消 type 类型的代理事件绑定\n * ========================================================================\n * 如果没有设置 handler，则销毁 this.$options 绑定的所有符合 type 事件类型的事件绑定\n * ========================================================================\n * @method off\n * @param {HTMLElement} el - （必须）取消事件绑定的 DOM 元素\n * @param {String} type - （必须）事件类型\n * @param {Function} [fn] - （可选）事件处理器回调函数\n */\nconst off = (el, type, fn) => {\n  // 如果不设置 fn 参数，默认清除 el 元素上绑定的所有事件处理器\n  if (!isFunction(fn)) {\n    return purgeElement(el, type)\n  }\n\n  _off(el, type, fn)\n}\n\nexport default off\n","/**\n * 获取 options 节点下匹配 selector 选择器的 DOM 节点\n * ========================================================================\n * Element.matches() 方法可以用来判断 DOM 元素是否与给定的选择器匹配，事件代理判断是\n * 否触发绑定的代理事件回调函数，关键就是使用 Element.matches() 辨别当前事件触发的目\n * 标 DOM 元素是否为事件代理所期望触发的目标。\n * ========================================================================\n * @method matches\n * @see https://developer.mozilla.org/en-US/docs/web/api/element/matches\n * @param {HTMLElement} el - （必须）DOM 元素\n * @param {String} selector - （必须）匹配 DOM 元素的选择器\n * @returns {Boolean}\n */\nconst matches = (el, selector = '') => {\n  const sel = selector.replace(/^>/i, '')\n\n  if (!selector || !sel || !el) {\n    return false\n  }\n\n  /* istanbul ignore else */\n  if (el.matches) {\n    return el.matches(sel)\n  } else if (el.msMatchesSelector) {\n    return el.msMatchesSelector(sel)\n  } else {\n    return false\n  }\n}\n\nexport default matches\n","/**\n * 获取 DOM 元素的父节点\n * ========================================================================\n * @method getParentOrHost\n * @param {*|HTMLElement} el - （必须）要获取父节点的 DOM 元素\n * @returns {*|HTMLElement}\n */\nconst getParentOrHost = (el) => {\n  return el.host && el !== document && el.host.nodeType\n    ? el.host\n    : el.parentNode\n}\n\nexport default getParentOrHost\n","/**\n * 在某些情况下，某些浏览器（例如：Safari 浏览器）会返回实际的目标元素内部的文本节点。\n * resolveTextNode() 方法则会返回实际的目标节点。\n * ========================================================================\n * @method resolveTextNode\n * @param {HTMLElement|Text} el - 要解析的节点\n * @return {*|HTMLElement} - 实际的目标 DOM 节点\n */\nconst resolveTextNode = function (el) {\n  if (el && el.nodeType === 3) {\n    return el.parentNode\n  }\n\n  return el\n}\n\nexport default resolveTextNode\n","import resolveTextNode from './resolveTextNode'\n\n/**\n * 返回触发事件的 target DOM 元素\n * ========================================================================\n * @method getTarget\n * @param {Event} evt - Event 对象\n * @return {HTMLElement} - Event 对象的 target DOM 元素\n */\nconst getTarget = function (evt) {\n  const target = evt.target\n\n  return resolveTextNode(target)\n}\n\nexport default getTarget\n","import closest from './closest'\nimport off from './off'\nimport getTarget from './getTarget'\nimport { CAPTURE_EVENTS } from './enum'\n\n/**\n * 绑定代理事件\n * ========================================================================\n * @method on\n * @param {HTMLElement|String} el - （必须）绑定代理事件的 DOM 节点\n * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n * @param {String} type - （必须）事件类型\n * @param {Function} fn - （必须） 事件处理器回调函数\n * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向，\n * 当设置为 true 时，则事件处理器回调函数的 this 上下文指向为 data 对象\n * @param {Boolean} once - （可选）是否仅触发一次\n */\nconst on = (el, selector, type, fn, data, context, once = false) => {\n  // CAPTURE_EVENTS 中的特殊事件，采用事件捕获模型\n  const capture = CAPTURE_EVENTS.indexOf(type) > -1\n\n  const listener = function (evt) {\n    const target = getTarget(evt)\n    // 通过 Element.matches 方法获得点击的目标元素\n    const delegateTarget = closest(target, selector, el)\n    let overrideContext = context || el\n\n    evt.delegateTarget = delegateTarget\n\n    // 当设置为 true 时，则事件处理器回调函数的\n    // this 上下文指向为 data 对象\n    if (context === true) {\n      overrideContext = data\n    }\n\n    /* istanbul ignore else */\n    if (delegateTarget) {\n      // 仅触发一次\n      /* istanbul ignore else */\n      if (once === true) {\n        off(el, type, listener)\n      }\n\n      fn.call(overrideContext, evt, data)\n    }\n  }\n\n  if (!el._listeners) {\n    el._listeners = []\n  }\n\n  // 缓存 options 元素绑定的事件处理器\n  el._listeners.push({\n    el,\n    selector,\n    type,\n    fn: listener,\n    data,\n    context,\n    capture\n  })\n\n  // 缓存包装后的事件处理器\n  fn._delegateListener = listener\n\n  el.addEventListener(type, listener, capture)\n}\n\nexport default on\n","import matches from './matches'\nimport getParentOrHost from './getParentOrHost'\n\n/**\n * 获取 options 元素父元素最近的包含 selector 选择器的元素\n * ========================================================================\n * @method closest\n * @param {HTMLElement} el - （必须）DOM 元素\n * @param {String} selector - （必须）DOM 元素的选择其\n * @param {HTMLElement} [ctx] - （必须）比对的 DOM 元素\n * @param {Boolean} [includeCTX] - （必须）是否包含 context DOM 元素\n * @returns {null|HTMLElement} - 返回最接近的 DOM 元素\n */\nconst closest = (el, selector, ctx, includeCTX) => {\n  const context = ctx || document\n\n  if (!el) {\n    return null\n  }\n\n  do {\n    /* istanbul ignore else */\n    if (\n      (selector != null &&\n        (selector[0] === '>'\n          ? el.parentNode === context && matches(el, selector)\n          : matches(el, selector))) ||\n      (includeCTX && el === context)\n    ) {\n      return el\n    }\n\n    /* istanbul ignore else */\n    if (el === context) {\n      break\n    }\n\n    /* jshint boss:true */\n  } while ((el = getParentOrHost(el)))\n}\n\nexport default closest\n","/**\n * 检测当前浏览器是否为 IE 浏览器\n * ========================================================================\n * IE 浏览器返回 true，其它浏览器返回 false\n * ========================================================================\n * @method isIE\n * @returns {Boolean} - IE 浏览器返回 true，其它浏览器返回 false\n */\nconst isIE = () => {\n  const agent = navigator.userAgent\n\n  return !!agent.match(/Trident/g) || !!agent.match(/MSIE/g)\n}\n\nexport default isIE\n","import getListeners from './getListeners'\n\n/**\n * 返回已绑定的事件类型的数组（去除名称重复的事件）\n * ========================================================================\n * @method getTypes\n * @returns {Array}\n */\nconst getTypes = (el) => {\n  const listeners = getListeners(el)\n  const types = []\n\n  listeners.forEach((listener) => {\n    types.push(listener.type)\n  })\n\n  return [...new Set(types)]\n}\n\nexport default getTypes\n","/**\n * 获取 scrollTop 和 scrollLeft 数组数据\n * ========================================================================\n * IE 浏览器种计算 pageX 和 pageY，需要包含 scrollTop 和 scrollLeft 的值\n * ========================================================================\n * @method getScroll\n * @return {Array} - 返回滚动信息的数组 [scrollTop, scrollLeft]\n */\nconst getScroll = function () {\n  const $body = document.documentElement || document.body\n  let scrollXY = [0, 0]\n\n  if ($body && ($body.scrollTop || $body.scrollLeft)) {\n    scrollXY = [$body.scrollTop, $body.scrollLeft]\n  }\n\n  return scrollXY\n}\n\nexport default getScroll\n","import getScrollLeft from './getScrollLeft'\nimport isIE from './isIE'\n\n/**\n * 获取事件触发时的 pageX 值\n * ========================================================================\n * @method getPageX\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/MouseEvent/pageX\n * @param {Event} evt - （必须）Event 对象\n * @return {Number} - 返回事件触发时的 pageX 值\n */\nconst getPageX = function (evt) {\n  let x = evt.pageX\n\n  /* istanbul ignore else */\n  if (!x && 0 !== x) {\n    x = evt.clientX || 0\n\n    if (isIE()) {\n      x += getScrollLeft()\n    }\n  }\n\n  return x\n}\n\nexport default getPageX\n","import getScroll from './getScroll'\n\n/**\n * 获取 scrollTop 值\n * ========================================================================\n * @method getScrollLeft\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollLeft\n * @return {Number} - 返回 scrollLeft 值\n */\nconst getScrollLeft = function () {\n  return getScroll()[1]\n}\n\nexport default getScrollLeft\n","import getScrollTop from './getScrollTop'\nimport isIE from './isIE'\n\n/**\n * 获取事件触发时的 pageY 值\n * ========================================================================\n * @method getPageY\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/MouseEvent/pageY\n * @param {Event} evt - （必须）Event 对象\n * @return {Number} - 返回事件触发时的 pageY 值\n */\nconst getPageY = function (evt) {\n  let y = evt.pageY\n\n  /* istanbul ignore else */\n  if (!y && 0 !== y) {\n    y = evt.clientY || 0\n\n    if (isIE()) {\n      y += getScrollTop()\n    }\n  }\n\n  return y\n}\n\nexport default getPageY\n","import getScroll from './getScroll'\n\n/**\n * 获取 scrollTop 值\n * ========================================================================\n * @method getScrollTop\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollTop\n * @return {Number} - 返回 getScrollTop 值\n */\nconst getScrollTop = function () {\n  return getScroll()[0]\n}\n\nexport default getScrollTop\n","import isAppleSafari from './isAppleSafari'\n\n/**\n * 返回触发事件的 charCode\n * ========================================================================\n * @method getCharCode\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/KeyboardEvent/keyCode\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/KeyboardEvent/charCode\n * @param {Event} evt - Event 对象\n * @return {Number} - 返回事件的 charCode\n */\nconst getCharCode = function (evt) {\n  let code = evt.keyCode || evt.charCode\n  // keycodes for webkit/safari\n  const webkitKeymap = {\n    63232: 38, // up\n    63233: 40, // down\n    63234: 37, // left\n    63235: 39, // right\n    63276: 33, // page up\n    63277: 34, // page down\n    25: 9 // The SHIFT-TAB (Safari provides a different key code in\n    // this case, even though the shiftKey modifier is set)\n  }\n\n  // webkit key normalization\n  if (isAppleSafari() && code in webkitKeymap) {\n    code = webkitKeymap[code]\n  }\n\n  return code\n}\n\nexport default getCharCode\n","/**\n * 判断是否为 Apple 设备的 Safari 浏览器\n * ========================================================================\n * @method isAppleSafari\n * @returns {Boolean}\n */\nconst isAppleSafari = () => {\n  const UA = navigator.userAgent\n  const platforms = /Mac|iPhone|iPod|iPad/i\n  const rejected = /Chrome|Android|CriOS|FxiOS|EdgiOS/i\n  const expected = /Safari/i\n\n  if (rejected.test(UA)) {\n    return false\n  }\n\n  return platforms.test(UA) && expected.test(UA)\n}\n\nexport default isAppleSafari\n","/**\n * 阻止触发绑定事件 DOM 元素的默认行为\n * ========================================================================\n * @method preventDefault\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Event/preventDefault\n * @param {Event} evt - 事件对象\n *\n * @example\n * <div id=\"nav\" class=\"nav\">\n *   <a id=\"service\" class=\"anchor\" href=\"https://www.yaohaixiao.com/serivce\">Service</a>\n *   <a id=\"help\" class=\"anchor\" href=\"https://www.yaohaixiao.com/help\">Help</a>\n * </div>\n *\n * const $nav = document.querySelector('#nav')\n * const $service = document.querySelector('.anchor')\n *\n * on($nav, 'click', function(evt) {\n *   console.log('你点击了导航栏')\n * })\n *\n * on($anchor, 'click', function(evt) {\n *   console.log('tagName', this.tagName)\n *\n *   // 在工作台输出：'a'\n *   // 会触发事件冒泡，输出：'你点击了导航栏'\n *   // 但不会切换到 href 属性的页面地址，阻止了点击链接的默认行为\n *   stopEvent(evt)\n * })\n */\nconst preventDefault = function (evt) {\n  evt.preventDefault()\n}\n\nexport default preventDefault\n","/**\n * 终止事件在传播过程的捕获或冒泡的事件流\n * ========================================================================\n * @method stopPropagation\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Event/stopPropagation\n * @param {Event} evt - 事件对象\n *\n * @example\n * <div id=\"nav\" class=\"nav\">\n *   <a id=\"service\" class=\"anchor\" href=\"https://www.yaohaixiao.com/serivce\">Service</a>\n *   <a id=\"help\" class=\"anchor\" href=\"https://www.yaohaixiao.com/help\">Help</a>\n * </div>\n *\n * const $nav = document.querySelector('#nav')\n * const $service = document.querySelector('.anchor')\n *\n * on($nav, 'click', function(evt) {\n *   console.log('你点击了导航栏')\n * })\n *\n * on($anchor, 'click', function(evt) {\n *   console.log('tagName', this.tagName)\n *\n *   // 工作台输出：'a'\n *   // 然后跳转到 href 的地址\n *   // 但不会触发事件冒泡，输出：'你点击了导航栏'\n *   stopPropagation(evt)\n * })\n */\nconst stopPropagation = function (evt) {\n  evt.stopPropagation()\n}\n\nexport default stopPropagation\n","import stopPropagation from './stopPropagation'\nimport preventDefault from './preventDefault'\n\n/**\n * 停止事件（阻止默认行为和阻止事件的捕获或冒泡）\n * ========================================================================\n * @method stopEvent\n * @param {Event} evt - 事件对象\n *\n * @example\n * <div id=\"nav\" class=\"nav\">\n *   <a id=\"service\" class=\"anchor\" href=\"https://www.yaohaixiao.com/serivce\">Service</a>\n *   <a id=\"help\" class=\"anchor\" href=\"https://www.yaohaixiao.com/help\">Help</a>\n * </div>\n *\n * const $nav = document.querySelector('#nav')\n * const $service = document.querySelector('.anchor')\n *\n * on($nav, 'click', function(evt) {\n *   console.log('你点击了导航栏')\n * })\n *\n * on($anchor, 'click', function(evt) {\n *   console.log('tagName', this.tagName)\n *\n *   // 工作台输出：'a'\n *   // 不会触发事件冒泡，输出：'你点击了导航栏'\n *   // 也不会切换到 href 属性的页面，阻止了点击链接的默认行为\n *   stopEvent(evt)\n * })\n */\nconst stopEvent = function (evt) {\n  stopPropagation(evt)\n  preventDefault(evt)\n}\n\nexport default stopEvent\n","import createEvent from './createEvent'\nimport off from './off'\nimport on from './on'\nimport once from './once'\nimport focusin from './focusin'\nimport focusout from './focusout'\nimport isElement from './isElement'\nimport isString from './isString'\nimport getListeners from './getListeners'\nimport getTypes from './getTypes'\nimport hasEvent from './hasEvent'\nimport getPageX from './getPageX'\nimport getPageY from './getPageY'\nimport getPageXY from './getPageXY'\nimport getCharCode from './getCharCode'\nimport getRelatedTarget from './getRelatedTarget'\nimport getTarget from './getTarget'\nimport purgeElement from './purgeElement'\nimport destroy from './destroy'\nimport preventDefault from './preventDefault'\nimport stopPropagation from './stopPropagation'\nimport stopEvent from './stopEvent'\nimport stopImmediate from './stopImmediate'\nimport trigger from './trigger'\n\n/**\n * Emitter 类 - JavaScript 事件代理对象\n * ========================================================================\n */\nclass Emitter {\n  /**\n   * Emitter 构造函数\n   * ========================================================================\n   * @constructor\n   * @param {HTMLElement|String} el - （必须）DOM 元素或其选择器\n   * @returns {Emitter} - Emitter 对象\n   */\n  constructor(el) {\n    if (isElement(el)) {\n      this.$el = el\n    } else {\n      if (isString(el)) {\n        this.$el = document.querySelector(el)\n      }\n    }\n\n    return this\n  }\n\n  /**\n   * 获取 DOM 元素（type 事件类型）事件绑定信息\n   * ========================================================================\n   * 如果设置了事件类型 type， 则返回指定类型的事件绑定信息，否则返回所有事件绑定信息\n   * ========================================================================\n   * @method getListeners\n   * @param {String} [type] - （可选）事件类型\n   * @returns {Array} - 已绑定的事件信息\n   */\n  getListeners(type) {\n    return getListeners(this.$el, type)\n  }\n\n  /**\n   * 返回已绑定的事件类型的数组（去除名称重复的事件）\n   * ========================================================================\n   * @method getTypes\n   * @since 1.5.0\n   * @returns {Array}\n   */\n  getTypes() {\n    return getTypes(this.$el)\n  }\n\n  /**\n   * 判断是否已经（指定类型的）绑定事件\n   * ========================================================================\n   * @method hasEvent\n   * @since 1.4.0\n   * @param {String} [type] - （可选）事件名称：\n   *                           指定 type，则判断是否绑定 type 类型事件；\n   *                           未指定 type，则判断是否绑定任意类型的事件；\n   * @returns {Boolean}\n   */\n  hasEvent(type) {\n    return hasEvent(this.$el, type)\n  }\n\n  /**\n   * 获取事件触发时的 pageX 值\n   * ========================================================================\n   * @method getPageX\n   * @see getPageX\n   * @param {Event} evt - （必须）Event 对象\n   * @return {Number} - 返回事件触发时的 pageX 值\n   */\n  getPageX(evt) {\n    return getPageX(evt)\n  }\n\n  /**\n   * 获取事件触发时的 pageY 值\n   * ========================================================================\n   * @method getPageY\n   * @see getPageY\n   * @param {Event} evt - （必须）Event 对象\n   * @return {Number} - 返回事件触发时的 pageY 值\n   */\n  getPageY(evt) {\n    return getPageY(evt)\n  }\n\n  /**\n   * 获取事件触发时的 pageX 和 pageY 数组数据\n   * ========================================================================\n   * @method getPageXY\n   * @see getPageXY\n   * @param {Event} evt - （必须）Event 对象\n   * @return {Array} - 返回事件触发时的数组数据：[pageX, pageY]\n   */\n  getPageXY(evt) {\n    return getPageXY(evt)\n  }\n\n  /**\n   * 返回触发事件的 charCode\n   * ========================================================================\n   * @method getCharCode\n   * @see getCharCode\n   * @param {Event} evt - （必须）Event 对象\n   * @return {Number} - 返回事件的 charCode\n   */\n  getCharCode(evt) {\n    return getCharCode(evt)\n  }\n\n  /**\n   * 返回触发（鼠标）事件的 relatedTarget DOM 元素。\n   * ========================================================================\n   * MouseEvent.relatedTarget 只读属性是鼠标事件的次要目标（如果有）。相关的鼠标事件：\n   * mouseenter\n   * mouseleave\n   * mouseover\n   * mouseout\n   * dragenter\n   * dragleave\n   * ========================================================================\n   * @method getRelatedTarget\n   * @since 1.1.0\n   * @see https://developer.mozilla.org/en-US/docs/web/api/mouseevent/relatedtarget\n   * @param {Event} evt - Event 对象\n   * @return {HTMLElement} - Event 对象的 relatedTarget DOM 元素\n   */\n  getRelatedTarget(evt) {\n    return getRelatedTarget(evt)\n  }\n\n  /**\n   * 返回触发事件的 target DOM 元素\n   * ========================================================================\n   * @method getTarget\n   * @since 1.1.0\n   * @param {Event} evt - Event 对象\n   * @return {HTMLElement} - Event 对象的 target DOM 元素\n   */\n  getTarget(evt) {\n    return getTarget(evt)\n  }\n\n  /**\n   * 销毁（type 类型的）代理事件绑定\n   * ========================================================================\n   * 1. 设置了事件类型 type，则销毁指定类型的事件绑定，否则清除所有代理事件绑定\n   * 2. recurse 设置为 true，递归销毁子节点全部事件绑定\n   * ========================================================================\n   * @method purge\n   * @param {String} type  - （必须）事件类型\n   * @param {Boolean} [recurse]  - （可选）是否递归销毁子节点所有事件绑定\n   * 元素绑定的全部事件处理器\n   * @returns {Emitter} - Emitter 对象\n   */\n  purge(type, recurse = false) {\n    purgeElement(this.$el, type, recurse)\n\n    return this\n  }\n\n  /**\n   * 销毁所有已绑定的代理事件\n   * ========================================================================\n   * @method destroy\n   * @returns {Emitter} - Emitter 对象\n   */\n  destroy() {\n    destroy(this.$el)\n\n    return this\n  }\n\n  /**\n   * 创建自定义事件（CustomerEvent）\n   * ========================================================================\n   * @method createEvent\n   * @since 1.8.0\n   * @see createEvent\n   * @param {String} type - （必须）事件类型（名称）\n   * @param {Object} [detail] - （可选）传递给自定义事件的数据，默认为 null\n   * @param {Boolean} [bubbles] - （可选）是否支持冒泡，默认为 true\n   * @param {Boolean} [cancelable] - （可选）是否可以取消，默认为 true\n   * @returns {CustomEvent} - CustomerEvent 实例\n   */\n  createEvent(type, detail = null, bubbles = true, cancelable = true) {\n    return createEvent(type, detail, bubbles, cancelable)\n  }\n\n  /**\n   * 取消 type 类型的代理事件绑定\n   * ========================================================================\n   * 如果没有设置 handler，则销毁 this.$options 绑定的所有符合 type 事件类型的事件绑定\n   * ========================================================================\n   * @method off\n   * @param {String} type - （必须）事件类型\n   * @param {Function} [handler] - （可选）事件处理器回调函数\n   * @returns {Emitter} - Emitter 对象\n   */\n  off(type, handler) {\n    off(this.$el, type, handler)\n\n    return this\n  }\n\n  /**\n   * 绑定代理事件\n   * ========================================================================\n   * @method on\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {String} type - （必须）事件类型\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向：\n   * 当设置为 true 时，则事件处理器回调函数的 this 上下文指向为 data 对象；\n   * 如未指定 context，则事件处理器回调函数的 this 上下文指向为 Emitter 对象；\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  on(selector, type, handler, data, context, once = false) {\n    on(this.$el, selector, type, handler, data, context || this, once)\n\n    return this\n  }\n\n  /**\n   * 绑定仅触发一次的代理事件\n   * ========================================================================\n   * @method once\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {String} type - （必须）事件类型\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @returns {Emitter} - Emitter 对象\n   */\n  once(selector, type, handler, data, context) {\n    once(this.$el, selector, type, handler, data, context)\n\n    return this\n  }\n\n  /**\n   * 绑定 click 代理事件\n   * ========================================================================\n   * @method click\n   * @since 1.4.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/click_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  click(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'click', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 dbclick 代理事件\n   * ========================================================================\n   * @method dbclick\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/dblclick_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  dbclick(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'dbclick', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 mouseenter 代理事件\n   * ========================================================================\n   * @method mouseenter\n   * @since 1.4.0\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  mouseenter(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'mouseenter', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 mouseleave 代理事件\n   * ========================================================================\n   * @method mouseleave\n   * @since 1.4.0\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  mouseleave(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'mouseleave', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 mousedown 代理事件\n   * ========================================================================\n   * @method mousedown\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  mousedown(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'mousedown', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 mouseup 代理事件\n   * ========================================================================\n   * @method mouseup\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  mouseup(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'mouseup', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 mouseover 代理事件\n   * ========================================================================\n   * @method mouseover\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  mouseover(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'mouseover', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 mousemove 代理事件\n   * ========================================================================\n   * @method mousemove\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  mousemove(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'mousemove', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 mouseout 代理事件\n   * ========================================================================\n   * @method mouseout\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  mouseout(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'mouseout', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 drag 代理事件\n   * ========================================================================\n   * @method drag\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/drag_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  drag(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'drag', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 dragend 代理事件\n   * ========================================================================\n   * @method dragend\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/dragend_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  dragend(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'dragend', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 dragenter 代理事件\n   * ========================================================================\n   * @method dragenter\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/dragenter_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  dragenter(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'dragenter', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 dragleave 代理事件\n   * ========================================================================\n   * @method dragleave\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/dragleave_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  dragleave(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'dragleave', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 dragover 代理事件\n   * ========================================================================\n   * @method dragover\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/dragover_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  dragover(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'dragover', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 dragstart 代理事件\n   * ========================================================================\n   * @method dragstart\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/dragstart_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  dragstart(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'dragstart', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 drop 代理事件\n   * ========================================================================\n   * @method drop\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/drop_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  drop(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'drop', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 wheel 代理事件\n   * ========================================================================\n   * @method wheel\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  wheel(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'wheel', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 contextmenu 代理事件\n   * ========================================================================\n   * @method contextmenu\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/contextmenu_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  contextmenu(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'contextmenu', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 focusin 或者 focus 代理事件\n   * ========================================================================\n   * @method focusin\n   * @since 1.4.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/focus_event\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  focusin(selector, handler, data, context, once = false) {\n    focusin(this.$el, selector, handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 focusout 或者 blur 代理事件\n   * ========================================================================\n   * @method focusout\n   * @since 1.4.0\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  focusout(selector, handler, data, context, once = false) {\n    focusout(this.$el, selector, handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 change 代理事件\n   * ========================================================================\n   * @method change\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/change_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  change(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'change', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 input 代理事件\n   * ========================================================================\n   * @method input\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/input_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  input(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'input', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 compositionstart 代理事件\n   * ========================================================================\n   * @method compositionstart\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/compositionstart_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  compositionstart(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'compositionstart', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 compositionupdate 代理事件\n   * ========================================================================\n   * @method compositionupdate\n   * @since 1.7.0\n   * @see  https://developer.mozilla.org/zh-CN/docs/Web/API/Element/compositionupdate_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  compositionupdate(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'compositionupdate', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 compositionend 代理事件\n   * ========================================================================\n   * @method compositionend\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/compositionend_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  compositionend(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'compositionend', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 paste 代理事件\n   * ========================================================================\n   * @method paste\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/paste_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  paste(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'paste', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 copy 代理事件\n   * ========================================================================\n   * @method copy\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/copy_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  copy(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'copy', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 cut 代理事件\n   * ========================================================================\n   * @method cut\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/cut_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  cut(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'cut', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 keydown 代理事件\n   * ========================================================================\n   * @method keydown\n   * @since 1.7.0\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  keydown(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'keydown', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 keyup 代理事件\n   * ========================================================================\n   * @method keyup\n   * @since 1.7.0\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  keyup(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'keyup', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 error 代理事件\n   * ========================================================================\n   * @method error\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/error_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  error(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'error', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 触发代理自定义事件\n   * ========================================================================\n   * @method trigger\n   * @since 1.6.0\n   * @param {String} type - （必须）事件类型\n   * @param {String} selector - （必须）选择器\n   * @returns {Emitter} - Emitter 对象\n   */\n  trigger(type, selector) {\n    trigger(this.$el, type, selector)\n\n    return this\n  }\n\n  /**\n   * 阻止事件的默认行为\n   * ========================================================================\n   * @method preventDefault\n   * @see preventDefault\n   * @param {Event} evt - （必须）Event 对象\n   * @returns {Emitter}  - Emitter 对象\n   */\n  preventDefault(evt) {\n    preventDefault(evt)\n\n    return this\n  }\n\n  /**\n   * 终止事件在传播过程的捕获或冒泡的事件流\n   * ========================================================================\n   * @method stopPropagation\n   * @see stopPropagation\n   * @param {Event} evt - （必须）Event 对象\n   * @returns {Emitter}  - Emitter 对象\n   */\n  stopPropagation(evt) {\n    stopPropagation(evt)\n\n    return this\n  }\n\n  /**\n   * 停止事件（阻止默认行为和阻止事件的捕获或冒泡）\n   * ========================================================================\n   * @method stopEvent\n   * @see stopEvent\n   * @param {Event} evt - （必须）Event 对象\n   * @returns {Emitter}  - Emitter 对象\n   */\n  stopEvent(evt) {\n    stopEvent(evt)\n\n    return this\n  }\n\n  /**\n   * 阻止监听同一事件的其他事件监听器被调用，并且阻止默认行为和事件冒泡。\n   * ========================================================================\n   * @method stopImmediate\n   * @since 1.8.0\n   * @see stopImmediate\n   * @param {Event} evt - （必须）Event 对象\n   */\n  stopImmediate(evt) {\n    stopImmediate(evt)\n\n    return this\n  }\n}\n\nexport default Emitter\n","import isString from './isString'\nimport getTypes from './getTypes'\n\n/**\n * 判断是否已经（指定类型的）绑定事件\n * ========================================================================\n * @method hasEvent\n * @param {HTMLElement} el - 要检测是否绑定事件的 DOM 元素\n * @param {String} [type] - （可选）事件名称：\n *                           指定 type，则判断是否绑定 type 类型事件；\n *                           未指定 type，则判断是否绑定任意类型的事件；\n * @returns {Boolean}\n */\nconst hasEvent = (el, type) => {\n  const types = getTypes(el)\n  let result\n\n  if (types.length < 1) {\n    return false\n  }\n\n  result = types.length > 0\n\n  /* istanbul ignore else */\n  if (type && isString(type)) {\n    result = types.indexOf(type) > -1\n  }\n\n  return result\n}\n\nexport default hasEvent\n","import getPageX from './getPageX'\nimport getPageY from './getPageY'\n\n/**\n * 获取事件触发时的 pageX 和 pageY 数组数据\n * ========================================================================\n * @method getPageXY\n * @param {Event} evt - （必须）Event 对象\n * @return {Array} - 返回事件触发时的数组数据：[pageX, pageY]\n */\nconst getPageXY = function (evt) {\n  return [getPageX(evt), getPageY(evt)]\n}\n\nexport default getPageXY\n","import resolveTextNode from './resolveTextNode'\n\n/**\n * 返回触发（鼠标）事件的 relatedTarget DOM 元素。\n * ========================================================================\n * MouseEvent.relatedTarget 只读属性是鼠标事件的次要目标（如果有）。相关的鼠标事件：\n * mouseenter\n * mouseleave\n * mouseover\n * mouseout\n * dragenter\n * dragleave\n * ========================================================================\n * @method getRelatedTarget\n * @see https://developer.mozilla.org/en-US/docs/web/api/mouseevent/relatedtarget\n * @param {Event} evt - Event 对象\n * @return {HTMLElement} - Event 对象的 relatedTarget DOM 元素\n */\nconst getRelatedTarget = function (evt) {\n  let target = evt.relatedTarget\n  const type = evt.type\n\n  if (!target) {\n    if (type === 'mouseout') {\n      target = evt.toElement\n    } else if (type === 'mouseover') {\n      target = evt.fromElement\n    }\n  }\n\n  return resolveTextNode(target)\n}\n\nexport default getRelatedTarget\n","import getTypes from './getTypes'\nimport purgeElement from './purgeElement'\n\n/**\n * 销毁所有已绑定的代理事件\n * ========================================================================\n * @method destroy\n * @param {HTMLElement} el - 需要解除所有事件绑定的 DOM 元素\n * @returns {Emitter} - Emitter 对象\n */\nconst destroy = (el) => {\n  const types = getTypes(el)\n\n  types.forEach((type) => {\n    purgeElement(el, type, true)\n  })\n}\n\nexport default destroy\n","import on from './on'\n\n/**\n * 绑定只触发一次的事件\n * ========================================================================\n * @method once\n * @param {HTMLElement} el - （必须）绑定代理事件的 DOM 节点\n * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n * @param {String} type - （必须）事件类型\n * @param {Function} fn - （必须） 事件处理器回调函数\n * @param {Object} data - （可选）传递给事件处理器回调函数的数据对象\n * @param {Object|Boolean} context - （可选）事件处理器回调函数的 this 上下文指向，\n * 当设置为 true 时，则事件处理器回调函数的 this 上下文指向为 data 对象\n */\nconst once = (el, selector, type, fn, data, context) => {\n  on(el, selector, type, fn, data, context, true)\n}\n\nexport default once\n","import isIE from './isIE'\nimport on from './on'\n\n/**\n * 绑定 focusin 或者 focus 代理事件\n * ========================================================================\n * @method focusin\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/focus_event\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event\n * @param {HTMLElement} el - （必须）绑定代理事件的 DOM 节点\n * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n * @param {Function} fn - （必须） 事件处理器回调函数\n * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向，\n * 当设置为 true 时，则事件处理器回调函数的 this 上下文指向为 data 对象\n * @param {Boolean} [once] - （可选）是否仅触发一次\n */\nconst focusin = function (el, selector, fn, data, context, once = false) {\n  const FOCUSIN = isIE() ? 'focusin' : 'focus'\n\n  return on(el, selector, FOCUSIN, fn, data, context, once)\n}\n\nexport default focusin\n","import isIE from './isIE'\nimport on from './on'\n\n/**\n * 绑定 focusout 或者 blur 代理事件\n * ========================================================================\n * @method focusout\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event\n * @param {HTMLElement} el - （必须）绑定代理事件的 DOM 节点\n * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n * @param {Function} fn - （必须） 事件处理器回调函数\n * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向，\n * 当设置为 true 时，则事件处理器回调函数的 this 上下文指向为 data 对象\n * @param {Boolean} [once] - （可选）是否仅触发一次\n */\nconst focusout = function (el, selector, fn, data, context, once = false) {\n  const FOCUSOUT = isIE() ? 'focusout' : 'blur'\n\n  on(el, selector, FOCUSOUT, fn, data, context, once)\n}\n\nexport default focusout\n","import createEvent from './createEvent'\n\n/**\n * 触发代理自定义事件\n * ========================================================================\n * trigger() 方法也可以用来手动触发内置的事件，例如 click, mouseenter 等事件，通常\n * 使用 trigger() 来手动触发用户自定义事件。\n *\n * 另外，选择器 selector 的匹配使用 document.querySelector() 方法，因此仅事件触发一次。\n * ========================================================================\n * @method trigger\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/CustomEvent\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/dispatchEvent\n * @param {HTMLElement} el - （必须）绑定代理事件的 DOM 元素\n * @param {String} type - （必须）事件类型\n * @param {String} selector - （必须）选择器\n *\n * @example\n * const $list = document.querySelector('#list')\n * // 绑定 alert 自定义事件\n * on($list, '.item', 'alert', itemHandler)\n * on($list, '.remove', 'alert', removeHandler)\n *\n * // 触发 $list 下匹配 '.item' 元素手动触发 alert 自定义事件\n * trigger('alert', '.item')\n *\n * // 可以使用伪类选择器，更精确的匹配元素\n * trigger('alert', '.item:last-child')\n *\n * // 触发 $list 下匹配 '.remove' 元素手动触发 alert 自定义事件\n * trigger('alert', '.remove')\n * trigger('alert', '.remove:nth-child(2)')\n */\nconst trigger = (el, type, selector) => {\n  let $child\n\n  if (!type || !selector) {\n    return false\n  }\n\n  $child = el.querySelector(selector)\n\n  if (!$child) {\n    return false\n  }\n\n  $child.dispatchEvent(createEvent(type))\n}\n\nexport default trigger\n","import stopEvent from './stopEvent'\n\n/**\n * 阻止监听同一事件的其他事件监听器被调用，并且阻止默认行为和事件冒泡。\n * ========================================================================\n * @method stopImmediate\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Event/stopImmediatePropagation\n * @param {Event} evt - （必须）Event 对象\n *\n * @example\n * <div id=\"nav\" class=\"nav\">\n *   <a id=\"service\" class=\"anchor\" href=\"https://www.yaohaixiao.com/serivce\">Service</a>\n *   <a id=\"help\" class=\"anchor\" href=\"https://www.yaohaixiao.com/help\">Help</a>\n * </div>\n *\n * const $nav = document.querySelector('#nav')\n * const $service = document.querySelector('#service')\n * const logHandler = function(evt) {\n *   console.log(evt.target)\n * }\n * const styleHandler = function(evt) {\n *   $nav.classList.add('checked')\n * }\n * const serviceHandler = function(evt) {\n *   alert(evt.target)\n *   stopImmediate(evt)\n * }\n * const removeHandler = function(evt) {\n *   const $target = evt.target\n *\n *   $target.parentNode.removeChild($target)\n * }\n *\n * $nav.addEventListener('click', logHandler)\n * $nav.addEventListener('click', styleHandler)\n * $service.addEventListener('click', serviceHandler)\n * $service.addEventListener('click', removeHandler)\n *\n * $nav.click()\n * // => 触发 logHandler 和 styleHandler\n *\n * $service.click()\n * // => 仅触发 serviceHandler，不会触发 removeHandler\n * // => 并且不会跳转页面，也不会冒泡到 $nav，不会触发 logHandler 和 styleHandler\n */\nconst stopImmediate = function (evt) {\n  stopEvent(evt)\n  evt.stopImmediatePropagation()\n}\n\nexport default stopImmediate\n","import Emitter from './emitter'\n\nconst delegate = (el) => {\n  return new Emitter(el)\n}\n\nexport default delegate\n","import delegate from '../../delegate'\nimport $observer from './observer'\n\nconst $aside = document.querySelector('#aside')\nlet $active = null\n\nconst onAnchorTrigger = function (evt) {\n  const $target = evt.delegateTarget\n  const id = $target.href.split('#')[1]\n\n  $observer.emit('scroll:to:method', id)\n\n  evt.stopPropagation()\n  evt.preventDefault()\n}\n\nconst onAsyncAnchor = (id) => {\n  const $anchor = document.querySelector(\n    `.aside__anchor[href=\"#${id}\"]`\n  )\n  const $item = $anchor.parentNode\n\n  if ($active) {\n    $active.classList.remove('active')\n  }\n\n  $item.classList.add('active')\n  $active = $item\n}\n\nconst setup = () => {\n  const $emitter = delegate($aside)\n\n  $observer.on('sync:anchor', onAsyncAnchor)\n  $emitter.click('.aside__anchor', onAnchorTrigger)\n}\n\nexport default {\n  setup\n}\n","import delegate from '../../delegate'\nimport $observer from './observer'\n\nconst $buttons = document.querySelector('#buttons')\n\nconst toggle = (top) => {\n  const $main = document.querySelector('#main')\n  const MIN = 0\n  const MAX = $main.scrollHeight\n  const $up = $buttons.querySelector('.up')\n  const $down = $buttons.querySelector('.down')\n\n  if (top <= MIN) {\n    $up.classList.add('hide')\n    $down.classList.remove('hide')\n  } else if (top >= MAX) {\n    $down.classList.add('hide')\n    $up.classList.remove('hide')\n  } else if (top > MIN && top < MAX) {\n    $up.classList.remove('hide')\n    $down.classList.remove('hide')\n  }\n}\n\nconst setup = () => {\n  const $emitter = delegate($buttons)\n\n  toggle(0)\n\n  $observer.on('buttons:toggle', toggle)\n\n  $emitter.click('.up', () => {\n    $observer.emit('scroll:to:top', 50)\n  })\n  $emitter.click('.down', () => {\n    $observer.emit('scroll:to:bottom', 50)\n  })\n}\n\nexport default {\n  setup\n}\n","import delegate from '../../delegate'\n\nlet options = [\n  {\n    id: 1,\n    text: 'Item-1'\n  },\n  {\n    id: 2,\n    text: 'Item-2'\n  },\n  {\n    id: 3,\n    text: 'Item-3'\n  },\n  {\n    id: 4,\n    text: 'Item-4'\n  },\n  {\n    id: 5,\n    text: 'Item-5'\n  },\n  {\n    id: 6,\n    text: 'Item-6'\n  },\n  {\n    id: 7,\n    text: 'Item-7'\n  },\n  {\n    id: 8,\n    text: 'Item-8'\n  },\n  {\n    id: 9,\n    text: 'Item-9'\n  },\n  {\n    id: 10,\n    text: 'Item-10'\n  }\n]\nlet isRemoveOn = true\nlet isItemOn = true\n\nconst $remove = document.querySelector('#action-remove')\nconst $item = document.querySelector('#action-item')\nconst $append = document.querySelector('#append')\nconst $list = document.querySelector('#list')\n// eslint-disable-next-line no-undef\nconst $emitter = delegate($list)\nconst $console = document.querySelector('#console')\nconst $log = document.querySelector('#log')\n// eslint-disable-next-line no-undef\nconst $provider = delegate($console)\n\nconst draw = () => {\n  let items = []\n\n  options.forEach((option) => {\n    const id = option.id\n    const name = encodeURIComponent(option.text)\n    const item =\n      `<li id=\"${'item-' + id}\" class=\"case__item\">` +\n      `<span class=\"case__label\">${name}</span>` +\n      `<a href=\"#list?id=${id}&amp;name=${name}\" class=\"case__remove\" data-id=\"${id}\">删除</a>` +\n      `</li>`\n\n    items.push(item)\n  })\n\n  $list.innerHTML = items.join('')\n}\n\nconst append = function () {\n  const length = options.length\n  const id = length > 0 ? options[length - 1].id + 1 : 1\n  const option = {id: id, text: `Item-${id}`}\n\n  options.push(option)\n\n  draw()\n\n  $log.value += `新添加的 li 节点的 id 为：'item-${id}'\\r`\n\n  scroll()\n}\n\nconst remove = function (evt) {\n  const $target = evt.delegateTarget\n  const id = parseInt($target.getAttribute('data-id'), 10)\n\n  options = options.filter((option) => id !== option.id)\n\n  draw()\n\n  $log.value += `click 事件触发，事件的 delegateTarget 为：'${$target}'\\r`\n  $log.value += `删除的 li 节点 id 为：'item-${id}'\\r`\n\n  $emitter.stopImmediate(evt)\n\n  scroll()\n}\n\nconst logMouseEnter = function (evt) {\n  const $target = $emitter.getRelatedTarget(evt)\n\n  if (!$target) {\n    return false\n  }\n\n  $log.value += `mouseenter 事件触发，事件的 relatedTarget 为：'${$target}'\\r`\n\n  scroll()\n}\n\nconst logClick = function (evt) {\n  const pageX = $emitter.getPageX(evt)\n  const pageY = $emitter.getPageY(evt)\n  const $target = evt.delegateTarget\n\n  if (!$target) {\n    return false\n  }\n\n  $log.value += `click 事件触发，当前点击的 li 节点的 id 为：'${$target.id}'\\r`\n  $log.value += `getPageX() 获取点击处的 pageX 为：'${pageX}'\\r`\n  $log.value += `getPageY() 获取点点击处的 pageY 为：'${pageY}'\\r`\n\n  scroll()\n}\n\nconst logTrigger = function (evt) {\n  const $target = evt.delegateTarget\n  const type = evt.type\n\n  if (!$target) {\n    return false\n  }\n\n  $log.value += `$emitter.trigger('log', '.case__item:nth-child(2)') 触发自定义 ${type} 事件\\r`\n  $log.value += `事件的 delegateTarget 为节点的 id 为：'${$target.id}'\\r`\n\n  scroll()\n}\n\nconst toggleRemove = () => {\n  isRemoveOn = !isRemoveOn\n\n  if (isRemoveOn) {\n    $log.value += `已恢复 .case__remove 事件代理绑定\\r`\n    $remove.innerHTML = '解除 .case__remove 绑定'\n    $emitter.click('.case__remove', remove)\n  } else {\n    $log.value += `已解除 .case__remove 事件代理绑定\\r`\n    $remove.innerHTML = '恢复 .case__remove 绑定'\n    $emitter.off('click', remove)\n  }\n\n  scroll()\n}\n\nconst toggleLog = () => {\n  isItemOn = !isItemOn\n\n  if (isItemOn) {\n    $log.value += `已恢复 .case__item 事件代理绑定\\r`\n    $item.innerHTML = '解除 .case__item 绑定'\n    $emitter.mouseenter('.case__item', logMouseEnter)\n    $emitter.on('.case__item', 'click', logClick)\n  } else {\n    $log.value += `已解除 .case__item 事件代理绑定\\r`\n    $item.innerHTML = '恢复 .case__item 绑定'\n    $emitter.purge('mouseenter')\n    $emitter.off('click', logClick)\n  }\n\n  scroll()\n}\n\nconst typeHandler = function (evt) {\n  const type = evt.type\n  const $target = evt.target\n\n  if (!$target) {\n    return false\n  }\n\n  $log.value += `${$target} 触发 ${type} 事件\\r`\n\n  scroll()\n}\n\nconst keyboardHandler = function (evt) {\n  const type = evt.type\n  const $target = evt.target\n  const charCode = $provider.getCharCode(evt)\n\n  if (!$target) {\n    return false\n  }\n\n  $log.value += `\\r${$target} 触发 ${type} 事件\\r`\n  $log.value += `事件的 charCode 是：${charCode}\\r`\n\n  scroll()\n}\n\nconst lastItemHandler = function (evt) {\n  const type = evt.type\n  const $target = evt.target\n\n  if (!$target) {\n    return false\n  }\n\n  $emitter.stopImmediate(evt)\n\n  $log.value += `$emitter.trigger('alert', '.case__item:last-child') 触发自定义 ${type} 事件\\r`\n  $log.value += `事件的 delegateTarget 为节点的 id 为：'${$target.id}'\\r`\n\n  scroll()\n}\n\nconst scroll = () => {\n  $log.scrollTop = $log.scrollHeight\n}\n\nconst setup = () => {\n  let types = []\n\n  // 动态绘制 ul 中的列表项\n  draw()\n\n  $list.addEventListener('click', logClick)\n\n  // 取消或恢复 .item 元素的代理事件\n  $item.addEventListener('click', toggleLog)\n  // 取消或恢复 .remove 元素的代理事件\n  $remove.addEventListener('click', toggleRemove)\n\n  // 绑定不同元素的代理事件\n  $emitter.mouseenter('.case__item', logMouseEnter)\n  $emitter.click('.case__remove', remove)\n  $emitter.on('.case__item', 'click', logClick)\n  $emitter.on('.case__item', 'log', logTrigger)\n\n  $emitter.on('.case__item', 'alert', lastItemHandler)\n  $emitter.on('.case__item', 'alert', typeHandler)\n\n  // 动态创建列表项\n  $append.addEventListener('click', append)\n\n  types = $emitter.getTypes()\n\n  $log.value += `getTypes() 获取 $emitter 绑定事件：'${types}'\\r`\n\n  $emitter.trigger('log', '.case__item:nth-child(2)')\n  $emitter.trigger('alert', '.case__item:last-child')\n\n  $provider.focusin('.case__textarea', typeHandler)\n  $provider.keyup('.case__textarea', keyboardHandler)\n\n  types = $provider.getTypes()\n\n  $log.value += `getTypes() 获取 $provider 绑定事件：'${types}'\\r`\n}\n\nexport default {\n  setup\n}\n","import scroller from './scroller'\nimport anchors from './anchors'\nimport buttons from './buttons'\nimport docs from './docs'\n\nscroller.setup()\nanchors.setup()\nbuttons.setup()\ndocs.setup()\n"],"names":["$observer","topics","Object","create","emit","event","data","this","forEach","handler","on","push","off","i","findIndex","h","splice","$main","document","querySelector","MAX","scrollHeight","timer","playing","scrollTo","top","speed","scrollTop","distance","step","Math","ceil","scroll","clearTimeout","setTimeout","onScrollToTop","onScrollToBottom","onScrollToMethod","method","$method","offsetTop","scroller","Observer","IntersectionObserver","entries","entry","intersectionRatio","target","getAttribute","root","querySelectorAll","section","observe","sync","createEvent","type","detail","bubbles","cancelable","CustomEvent","isString","val","isElement","el","nodeName","tagName","nodeType","getListeners","listeners","_listeners","filter","listener","CAPTURE_EVENTS","_off","fn","capture","indexOf","_delegateListener","index","length","_delete","removeEventListener","purgeElement","recurse","$element","$children","childNodes","arguments","$child","isFunction","prototype","toString","apply","_typeof","matches","selector","sel","replace","msMatchesSelector","getParentOrHost","host","parentNode","resolveTextNode","getTarget","evt","context","once","delegateTarget","ctx","includeCTX","closest","overrideContext","call","addEventListener","isIE","agent","navigator","userAgent","match","getTypes","types","Set","getScroll","$body","documentElement","body","scrollXY","scrollLeft","getPageX","x","pageX","clientX","getPageY","y","pageY","clientY","getCharCode","code","keyCode","charCode","webkitKeymap","UA","test","isAppleSafari","preventDefault","stopPropagation","stopEvent","Emitter","constructor","$el","hasEvent","result","getPageXY","getRelatedTarget","relatedTarget","toElement","fromElement","purge","destroy","click","dbclick","mouseenter","mouseleave","mousedown","mouseup","mouseover","mousemove","mouseout","drag","dragend","dragenter","dragleave","dragover","dragstart","drop","wheel","contextmenu","focusin","FOCUSIN","focusout","FOCUSOUT","change","input","compositionstart","compositionupdate","compositionend","paste","copy","cut","keydown","keyup","error","trigger","dispatchEvent","stopImmediate","stopImmediatePropagation","delegate","$aside","$active","onAnchorTrigger","id","href","split","onAsyncAnchor","$item","classList","remove","add","anchors","$emitter","$buttons","toggle","$up","$down","buttons","options","text","isRemoveOn","isItemOn","$remove","$append","$list","$console","$log","$provider","draw","items","option","name","encodeURIComponent","item","innerHTML","join","append","value","$target","parseInt","logMouseEnter","logClick","logTrigger","toggleRemove","toggleLog","typeHandler","keyboardHandler","lastItemHandler","docs"],"mappings":"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"}