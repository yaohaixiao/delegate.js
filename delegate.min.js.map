{"version":3,"file":"delegate.min.js","sources":["createEvent.js","utils/isString.js","utils/isElement.js","getListeners.js","enum.js","_off.js","_delete.js","purgeElement.js","utils/isFunction.js","utils/_typeof.js","off.js","at.js","matches.js","getParentOrHost.js","resolveTextNode.js","getTarget.js","on.js","closest.js","utils/isIE.js","getTypes.js","getScroll.js","getPageX.js","getScrollLeft.js","getPageY.js","getScrollTop.js","getCharCode.js","utils/isAppleSafari.js","preventDefault.js","stopPropagation.js","stopEvent.js","emitter.js","hasEvent.js","getPageXY.js","getRelatedTarget.js","destroy.js","only.js","once.js","focusin.js","focusout.js","trigger.js","stopImmediate.js","delegate.js"],"sourcesContent":["/**\r\n * 创建自定义事件（CustomerEvent）\r\n * ========================================================================\r\n * @method createEvent\r\n * @param {String} type - （必须）事件类型（名称）\r\n * @param {Object} [detail] - （可选）传递给自定义事件的数据，默认为 null\r\n * @param {Boolean} [bubbles] - （可选）是否支持冒泡，默认为 true\r\n * @param {Boolean} [cancelable] - （可选）是否可以取消，默认为 true\r\n * @returns {CustomEvent} - CustomerEvent 实例\r\n *\r\n * @example\r\n * <div id=\"nav\" class=\"nav\">\r\n *   <a id=\"service\" class=\"anchor\" href=\"https://www.yaohaixiao.com/serivce\">Service</a>\r\n *   <a id=\"help\" class=\"anchor\" href=\"https://www.yaohaixiao.com/help\">Help</a>\r\n * </div>\r\n *\r\n * const $nav = document.querySelector('#nav')\r\n * const logEvent = createEvent('log', {\r\n *   name: 'Yao',\r\n *   hi() {\r\n *     console.log('hi！！！')\r\n *   }\r\n * })\r\n *\r\n * const logHandler = function(evt) {\r\n *   console.log('detail', evt.detail)\r\n *   console.log('type', evt.type)\r\n * }\r\n *\r\n * $nav.addEventListener('log', logHandler)\r\n *\r\n * $nav.dispatchEvent(logEvent)\r\n */\r\nconst createEvent = (\r\n  type,\r\n  detail = null,\r\n  bubbles = true,\r\n  cancelable = true\r\n) => {\r\n  return new CustomEvent(type, {\r\n    detail: detail,\r\n    bubbles: bubbles,\r\n    cancelable: cancelable\r\n  })\r\n}\r\n\r\nexport default createEvent\r\n","/**\r\n * 判断是否为 String 类型值\r\n * ========================================================================\r\n * @method isString\r\n * @param {*} val - （必须）待检测的字符串\r\n * @returns {Boolean}\r\n */\r\nconst isString = (val) => {\r\n  return typeof val === 'string'\r\n}\r\n\r\nexport default isString\r\n","/**\r\n * 检测是否为 HTMLElement 元素节点\r\n * ========================================================================\r\n * @method isElement\r\n * @param {*|HTMLElement} el - （必须）待检测的数据（DOM 元素）\r\n * @returns {Boolean}\r\n */\r\nconst isElement = (el) => {\r\n  return !!(el && el.nodeName && el.tagName && el.nodeType === 1)\r\n}\r\n\r\nexport default isElement\r\n","import isString from './utils/isString'\r\n\r\n/**\r\n * 获取 DOM 元素（type 事件类型）事件绑定信息\r\n * ========================================================================\r\n * 如果设置了事件类型 type， 则返回指定类型的事件绑定信息，否则返回所有事件绑定信息\r\n * ========================================================================\r\n * @methods getListeners\r\n * @param {HTMLElement} el - （必须）要获取事件绑定信息的 DOM 元素\r\n * @param {String} [type] - （可选）事件类型\r\n * @returns {Array} - 已绑定的事件信息\r\n */\r\nconst getListeners = (el, type) => {\r\n  let listeners = el._listeners || []\r\n\r\n  if (isString(type) && type) {\r\n    listeners = listeners.filter((listener) => {\r\n      return listener.type === type\r\n    })\r\n  }\r\n\r\n  return listeners\r\n}\r\n\r\nexport default getListeners\r\n","export const CAPTURE_EVENTS = [\r\n  'focusout',\r\n  'blur',\r\n  'focusin',\r\n  'focus',\r\n  'load',\r\n  'unload',\r\n  'mouseenter',\r\n  'mouseleave'\r\n]\r\n","import { CAPTURE_EVENTS } from './enum'\r\nimport _delete from './_delete'\r\n\r\n/**\r\n * （私有方法）取消 type 类型的代理事件绑定\r\n * ========================================================================\r\n * 如果没有设置 handler，则销毁 this.$options 绑定的所有符合 type 事件类型的事件绑定\r\n * ========================================================================\r\n * @method _off\r\n * @param {HTMLElement} el - （必须）取消事件绑定的 DOM 元素\r\n * @param {String} type - （必须）事件类型\r\n * @param {Function} fn - （必须）事件处理器回调函数\r\n * @private\r\n */\r\nconst _off = (el, type, fn) => {\r\n  const capture = CAPTURE_EVENTS.indexOf(type) > -1\r\n\r\n  /* istanbul ignore else */\r\n  if (fn._delegateListener) {\r\n    fn = fn._delegateListener\r\n    delete fn._delegateListener\r\n  }\r\n\r\n  // 移除缓存的 _listeners 数据\r\n  _delete(el, type, fn)\r\n\r\n  el.removeEventListener(type, fn, capture)\r\n}\r\n\r\nexport default _off\r\n","/**\r\n * 删除 DOM 元素缓存的 _listeners 数据\r\n * ========================================================================\r\n * @method _delete\r\n * @param {HTMLElement} el - 要删除 listener 的 DOM 元素\r\n * @param {String} type - 事件类型（名称）\r\n * @param {Function} [fn] - 事件处理器回调函数\r\n */\r\nconst _delete = function (el, type, fn) {\r\n  const listeners = el._listeners\r\n  let index = -1\r\n\r\n  if (listeners.length < 1) {\r\n    return false\r\n  }\r\n\r\n  // 移除缓存的 _listeners 数据\r\n  listeners.forEach((listener, i) => {\r\n    const handler = listener.fn\r\n\r\n    if (type === listener.type) {\r\n      index = i\r\n\r\n      if (handler === fn) {\r\n        index = i\r\n      }\r\n    }\r\n  })\r\n\r\n  /* istanbul ignore else */\r\n  if (index > -1) {\r\n    listeners.splice(index, 1)\r\n  }\r\n}\r\n\r\nexport default _delete\r\n","import isString from './utils/isString'\r\nimport isElement from './utils/isElement'\r\nimport getListeners from './getListeners'\r\nimport _off from './_off'\r\n\r\n/**\r\n * 销毁（type 类型的）代理事件绑定\r\n * ========================================================================\r\n * 1. 设置了事件类型 type，则销毁指定类型的事件绑定，否则清除所有代理事件绑定\r\n * 2. recurse 设置为 true，递归销毁子节点全部事件绑定\r\n * ========================================================================\r\n * @method purgeElement\r\n * @param {HTMLElement|String} el - （必须）DOM 元素或者其选择器\r\n * @param {String|Boolean} type - （必须）事件类型\r\n * @param {Boolean} [recurse] - （可选）是否递归销毁子节点所有事件绑定\r\n */\r\nconst purgeElement = function (el, type, recurse = false) {\r\n  const $element = isString(el) ? document.querySelector(el) : el\r\n  const $children = $element.childNodes\r\n  const listeners = getListeners($element, type)\r\n\r\n  listeners.forEach((listener) => {\r\n    _off($element, listener.type, listener.fn)\r\n  })\r\n\r\n  if (\r\n    (recurse || type === true || arguments.length === 1) &&\r\n    $element &&\r\n    $children\r\n  ) {\r\n    $children.forEach(($child) => {\r\n      if (isElement($child)) {\r\n        purgeElement($child, type, recurse)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport default purgeElement\r\n","import _typeof from './_typeof'\r\n\r\n/**\r\n * 检测测试数据是否为 Function 类型\r\n * ========================================================================\r\n * @method isFunction\r\n * @param {*} val - （必须）待检测的数据\r\n * @returns {boolean} 'val' 是 Function 类型返回 true，否则返回 false\r\n */\r\nconst isFunction = (val) => {\r\n  return typeof val === 'function' || _typeof(val) === '[object Function]'\r\n}\r\n\r\nexport default isFunction\r\n","/**\r\n * 返回检测数据调用 toString() 方法后的字符串，用以判断数据类型。\r\n * ========================================================================\r\n * @method _typeof\r\n * @param {*} val - （必须）待检测的数据\r\n * @returns {String}\r\n *\r\n * @example\r\n * _typeof({})\r\n * // => '[object Object]'\r\n *\r\n * _typeof(function(){})\r\n * // => '[object Function]'\r\n *\r\n * _typeof([])\r\n * // => '[object Array]'\r\n *\r\n * _typeof('')\r\n * // => '[object String]'\r\n *\r\n * _typeof(2)\r\n * // => '[object Number]'\r\n */\r\nconst _typeof = (val) => {\r\n  return Object.prototype.toString.apply(val)\r\n}\r\n\r\nexport default _typeof\r\n","import purgeElement from './purgeElement'\r\nimport isFunction from './utils/isFunction'\r\nimport _off from './_off'\r\n\r\n/**\r\n * 取消 type 类型的代理事件绑定\r\n * ========================================================================\r\n * 如果没有设置 handler，则销毁 this.$options 绑定的所有符合 type 事件类型的事件绑定\r\n * ========================================================================\r\n * @method off\r\n * @param {HTMLElement} el - （必须）取消事件绑定的 DOM 元素\r\n * @param {String} type - （必须）事件类型\r\n * @param {Function} [fn] - （可选）事件处理器回调函数\r\n */\r\nconst off = (el, type, fn) => {\r\n  // 如果不设置 fn 参数，默认清除 el 元素上绑定的所有事件处理器\r\n  if (!isFunction(fn)) {\r\n    return purgeElement(el, type)\r\n  }\r\n\r\n  _off(el, type, fn)\r\n}\r\n\r\nexport default off\r\n","import isFunction from './utils/isFunction'\r\nimport off from './off'\r\n\r\nimport { CAPTURE_EVENTS } from './enum'\r\n\r\n/**\r\n * 绑定事件\r\n * ========================================================================\r\n * @method at\r\n * @param {HTMLElement|String|Object} el - （必须）绑定代理事件的 DOM 节点\r\n * @param {String|Function} type - （必须）事件类型或者事件处理器回调函数\r\n * @param {Function|Object} fn - （必须） 事件处理器回调函数或者传递给事件处理器回调函数的数据对象\r\n * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象或者事件处理器回调函数的 this 上下文指向，\r\n * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向，或者是否仅触发一次\r\n * 当设置为 true 时，则事件处理器回调函数的 this 上下文指向为 data 对象\r\n * @param {Boolean} once - （可选）是否仅触发一次\r\n */\r\nconst at = (el, type, fn, data, context, once = false) => {\r\n  // CAPTURE_EVENTS 中的特殊事件，采用事件捕获模型\r\n  const capture = CAPTURE_EVENTS.indexOf(type) > -1\r\n  const listener = function (evt) {\r\n    let overrideContext = context || el\r\n\r\n    // 当设置为 true 时，则事件处理器回调函数的\r\n    // this 上下文指向为 data 对象\r\n    if (context === true) {\r\n      overrideContext = data\r\n    }\r\n\r\n    // 仅触发一次\r\n    /* istanbul ignore else */\r\n    if (once === true) {\r\n      off(el, type, listener)\r\n    }\r\n\r\n    fn.call(overrideContext, evt, data)\r\n  }\r\n\r\n  if (!isFunction(fn)) {\r\n    return false\r\n  }\r\n\r\n  if (!el._listeners) {\r\n    el._listeners = []\r\n  }\r\n\r\n  // 缓存 options 元素绑定的事件处理器\r\n  el._listeners.push({\r\n    el,\r\n    type,\r\n    fn: listener,\r\n    data,\r\n    context,\r\n    capture\r\n  })\r\n\r\n  // 缓存包装后的事件处理器\r\n  fn._delegateListener = listener\r\n\r\n  el.addEventListener(type, listener, capture)\r\n}\r\n\r\nexport default at\r\n","/**\r\n * 获取 options 节点下匹配 selector 选择器的 DOM 节点\r\n * ========================================================================\r\n * Element.matches() 方法可以用来判断 DOM 元素是否与给定的选择器匹配，事件代理判断是\r\n * 否触发绑定的代理事件回调函数，关键就是使用 Element.matches() 辨别当前事件触发的目\r\n * 标 DOM 元素是否为事件代理所期望触发的目标。\r\n * ========================================================================\r\n * @method matches\r\n * @see https://developer.mozilla.org/en-US/docs/web/api/element/matches\r\n * @param {HTMLElement} el - （必须）DOM 元素\r\n * @param {String} selector - （必须）匹配 DOM 元素的选择器\r\n * @returns {Boolean}\r\n */\r\nconst matches = (el, selector = '') => {\r\n  const sel = selector.replace(/^>/i, '')\r\n\r\n  if (!selector || !sel || !el) {\r\n    return false\r\n  }\r\n\r\n  /* istanbul ignore else */\r\n  if (el.matches) {\r\n    return el.matches(sel)\r\n  } else if (el.msMatchesSelector) {\r\n    return el.msMatchesSelector(sel)\r\n  } else {\r\n    return false\r\n  }\r\n}\r\n\r\nexport default matches\r\n","/**\r\n * 获取 DOM 元素的父节点\r\n * ========================================================================\r\n * @method getParentOrHost\r\n * @param {*|HTMLElement} el - （必须）要获取父节点的 DOM 元素\r\n * @returns {*|HTMLElement}\r\n */\r\nconst getParentOrHost = (el) => {\r\n  return el.host && el !== document && el.host.nodeType\r\n    ? el.host\r\n    : el.parentNode\r\n}\r\n\r\nexport default getParentOrHost\r\n","/**\r\n * 在某些情况下，某些浏览器（例如：Safari 浏览器）会返回实际的目标元素内部的文本节点。\r\n * resolveTextNode() 方法则会返回实际的目标节点。\r\n * ========================================================================\r\n * @method resolveTextNode\r\n * @param {HTMLElement|Text} el - 要解析的节点\r\n * @return {*|HTMLElement} - 实际的目标 DOM 节点\r\n */\r\nconst resolveTextNode = function (el) {\r\n  if (el && el.nodeType === 3) {\r\n    return el.parentNode\r\n  }\r\n\r\n  return el\r\n}\r\n\r\nexport default resolveTextNode\r\n","import resolveTextNode from './resolveTextNode'\r\n\r\n/**\r\n * 返回触发事件的 target DOM 元素\r\n * ========================================================================\r\n * @method getTarget\r\n * @param {Event} evt - Event 对象\r\n * @return {HTMLElement} - Event 对象的 target DOM 元素\r\n */\r\nconst getTarget = function (evt) {\r\n  const target = evt.target\r\n\r\n  return resolveTextNode(target)\r\n}\r\n\r\nexport default getTarget\r\n","import closest from './closest'\r\nimport off from './off'\r\nimport getTarget from './getTarget'\r\nimport { CAPTURE_EVENTS } from './enum'\r\n\r\n/**\r\n * 绑定代理事件\r\n * ========================================================================\r\n * @method on\r\n * @param {HTMLElement|String} el - （必须）绑定代理事件的 DOM 节点\r\n * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n * @param {String} type - （必须）事件类型\r\n * @param {Function} fn - （必须） 事件处理器回调函数\r\n * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\r\n * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向，\r\n * 当设置为 true 时，则事件处理器回调函数的 this 上下文指向为 data 对象\r\n * @param {Boolean} once - （可选）是否仅触发一次\r\n */\r\nconst on = (el, selector, type, fn, data, context, once = false) => {\r\n  // CAPTURE_EVENTS 中的特殊事件，采用事件捕获模型\r\n  const capture = CAPTURE_EVENTS.indexOf(type) > -1\r\n\r\n  const listener = function (evt) {\r\n    const target = getTarget(evt)\r\n    // 通过 Element.matches 方法获得点击的目标元素\r\n    const delegateTarget = closest(target, selector, el)\r\n    let overrideContext = context || el\r\n\r\n    evt.delegateTarget = delegateTarget\r\n\r\n    // 当设置为 true 时，则事件处理器回调函数的\r\n    // this 上下文指向为 data 对象\r\n    if (context === true) {\r\n      overrideContext = data\r\n    }\r\n\r\n    /* istanbul ignore else */\r\n    if (delegateTarget) {\r\n      // 仅触发一次\r\n      /* istanbul ignore else */\r\n      if (once === true) {\r\n        off(el, type, listener)\r\n      }\r\n\r\n      fn.call(overrideContext, evt, data)\r\n    }\r\n  }\r\n\r\n  if (!el._listeners) {\r\n    el._listeners = []\r\n  }\r\n\r\n  // 缓存 options 元素绑定的事件处理器\r\n  el._listeners.push({\r\n    el,\r\n    selector,\r\n    type,\r\n    fn: listener,\r\n    data,\r\n    context,\r\n    capture\r\n  })\r\n\r\n  // 缓存包装后的事件处理器\r\n  fn._delegateListener = listener\r\n\r\n  el.addEventListener(type, listener, capture)\r\n}\r\n\r\nexport default on\r\n","import matches from './matches'\r\nimport getParentOrHost from './getParentOrHost'\r\n\r\n/**\r\n * 获取 options 元素父元素最近的包含 selector 选择器的元素\r\n * ========================================================================\r\n * @method closest\r\n * @param {HTMLElement} el - （必须）DOM 元素\r\n * @param {String} selector - （必须）DOM 元素的选择其\r\n * @param {HTMLElement} [ctx] - （必须）比对的 DOM 元素\r\n * @param {Boolean} [includeCTX] - （必须）是否包含 context DOM 元素\r\n * @returns {null|HTMLElement} - 返回最接近的 DOM 元素\r\n */\r\nconst closest = (el, selector, ctx, includeCTX) => {\r\n  const context = ctx || document\r\n\r\n  if (!el) {\r\n    return null\r\n  }\r\n\r\n  do {\r\n    /* istanbul ignore else */\r\n    if (\r\n      (selector != null &&\r\n        (selector[0] === '>'\r\n          ? el.parentNode === context && matches(el, selector)\r\n          : matches(el, selector))) ||\r\n      (includeCTX && el === context)\r\n    ) {\r\n      return el\r\n    }\r\n\r\n    /* istanbul ignore else */\r\n    if (el === context) {\r\n      break\r\n    }\r\n\r\n    /* jshint boss:true */\r\n  } while ((el = getParentOrHost(el)))\r\n}\r\n\r\nexport default closest\r\n","/**\r\n * 检测当前浏览器是否为 IE 浏览器\r\n * ========================================================================\r\n * IE 浏览器返回 true，其它浏览器返回 false\r\n * ========================================================================\r\n * @method isIE\r\n * @returns {Boolean} - IE 浏览器返回 true，其它浏览器返回 false\r\n */\r\nconst isIE = () => {\r\n  const agent = navigator.userAgent\r\n\r\n  return !!agent.match(/Trident/g) || !!agent.match(/MSIE/g)\r\n}\r\n\r\nexport default isIE\r\n","import getListeners from './getListeners'\r\n\r\n/**\r\n * 返回已绑定的事件类型的数组（去除名称重复的事件）\r\n * ========================================================================\r\n * @method getTypes\r\n * @returns {Array}\r\n */\r\nconst getTypes = (el) => {\r\n  const listeners = getListeners(el)\r\n  const types = []\r\n\r\n  listeners.forEach((listener) => {\r\n    types.push(listener.type)\r\n  })\r\n\r\n  return [...new Set(types)]\r\n}\r\n\r\nexport default getTypes\r\n","/**\r\n * 获取 scrollTop 和 scrollLeft 数组数据\r\n * ========================================================================\r\n * IE 浏览器种计算 pageX 和 pageY，需要包含 scrollTop 和 scrollLeft 的值\r\n * ========================================================================\r\n * @method getScroll\r\n * @return {Array} - 返回滚动信息的数组 [scrollTop, scrollLeft]\r\n */\r\nconst getScroll = function () {\r\n  const $body = document.documentElement || document.body\r\n  let scrollXY = [0, 0]\r\n\r\n  if ($body && ($body.scrollTop || $body.scrollLeft)) {\r\n    scrollXY = [$body.scrollTop, $body.scrollLeft]\r\n  }\r\n\r\n  return scrollXY\r\n}\r\n\r\nexport default getScroll\r\n","import getScrollLeft from './getScrollLeft'\r\nimport isIE from './utils/isIE'\r\n\r\n/**\r\n * 获取事件触发时的 pageX 值\r\n * ========================================================================\r\n * @method getPageX\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/MouseEvent/pageX\r\n * @param {Event} evt - （必须）Event 对象\r\n * @return {Number} - 返回事件触发时的 pageX 值\r\n */\r\nconst getPageX = function (evt) {\r\n  let x = evt.pageX\r\n\r\n  /* istanbul ignore else */\r\n  if (!x && 0 !== x) {\r\n    x = evt.clientX || 0\r\n\r\n    if (isIE()) {\r\n      x += getScrollLeft()\r\n    }\r\n  }\r\n\r\n  return x\r\n}\r\n\r\nexport default getPageX\r\n","import getScroll from './getScroll'\r\n\r\n/**\r\n * 获取 scrollTop 值\r\n * ========================================================================\r\n * @method getScrollLeft\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollLeft\r\n * @return {Number} - 返回 scrollLeft 值\r\n */\r\nconst getScrollLeft = function () {\r\n  return getScroll()[1]\r\n}\r\n\r\nexport default getScrollLeft\r\n","import getScrollTop from './getScrollTop'\r\nimport isIE from './utils/isIE'\r\n\r\n/**\r\n * 获取事件触发时的 pageY 值\r\n * ========================================================================\r\n * @method getPageY\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/MouseEvent/pageY\r\n * @param {Event} evt - （必须）Event 对象\r\n * @return {Number} - 返回事件触发时的 pageY 值\r\n */\r\nconst getPageY = function (evt) {\r\n  let y = evt.pageY\r\n\r\n  /* istanbul ignore else */\r\n  if (!y && 0 !== y) {\r\n    y = evt.clientY || 0\r\n\r\n    if (isIE()) {\r\n      y += getScrollTop()\r\n    }\r\n  }\r\n\r\n  return y\r\n}\r\n\r\nexport default getPageY\r\n","import getScroll from './getScroll'\r\n\r\n/**\r\n * 获取 scrollTop 值\r\n * ========================================================================\r\n * @method getScrollTop\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollTop\r\n * @return {Number} - 返回 getScrollTop 值\r\n */\r\nconst getScrollTop = function () {\r\n  return getScroll()[0]\r\n}\r\n\r\nexport default getScrollTop\r\n","import isAppleSafari from './utils/isAppleSafari'\r\n\r\n/**\r\n * 返回触发事件的 charCode\r\n * ========================================================================\r\n * @method getCharCode\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/KeyboardEvent/keyCode\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/KeyboardEvent/charCode\r\n * @param {Event} evt - Event 对象\r\n * @return {Number} - 返回事件的 charCode\r\n */\r\nconst getCharCode = function (evt) {\r\n  let code = evt.keyCode || evt.charCode\r\n  // keycodes for webkit/safari\r\n  const webkitKeymap = {\r\n    63232: 38, // up\r\n    63233: 40, // down\r\n    63234: 37, // left\r\n    63235: 39, // right\r\n    63276: 33, // page up\r\n    63277: 34, // page down\r\n    25: 9 // The SHIFT-TAB (Safari provides a different key code in\r\n    // this case, even though the shiftKey modifier is set)\r\n  }\r\n\r\n  // webkit key normalization\r\n  if (isAppleSafari() && code in webkitKeymap) {\r\n    code = webkitKeymap[code]\r\n  }\r\n\r\n  return code\r\n}\r\n\r\nexport default getCharCode\r\n","/**\r\n * 判断是否为 Apple 设备的 Safari 浏览器\r\n * ========================================================================\r\n * @method isAppleSafari\r\n * @returns {Boolean}\r\n */\r\nconst isAppleSafari = () => {\r\n  const UA = navigator.userAgent\r\n  const platforms = /Mac|iPhone|iPod|iPad/i\r\n  const rejected = /Chrome|Android|CriOS|FxiOS|EdgiOS/i\r\n  const expected = /Safari/i\r\n\r\n  if (rejected.test(UA)) {\r\n    return false\r\n  }\r\n\r\n  return platforms.test(UA) && expected.test(UA)\r\n}\r\n\r\nexport default isAppleSafari\r\n","/**\r\n * 阻止触发绑定事件 DOM 元素的默认行为\r\n * ========================================================================\r\n * @method preventDefault\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Event/preventDefault\r\n * @param {Event} evt - 事件对象\r\n *\r\n * @example\r\n * <div id=\"nav\" class=\"nav\">\r\n *   <a id=\"service\" class=\"anchor\" href=\"https://www.yaohaixiao.com/serivce\">Service</a>\r\n *   <a id=\"help\" class=\"anchor\" href=\"https://www.yaohaixiao.com/help\">Help</a>\r\n * </div>\r\n *\r\n * const $nav = document.querySelector('#nav')\r\n * const $service = document.querySelector('.anchor')\r\n *\r\n * on($nav, 'click', function(evt) {\r\n *   console.log('你点击了导航栏')\r\n * })\r\n *\r\n * on($anchor, 'click', function(evt) {\r\n *   console.log('tagName', this.tagName)\r\n *\r\n *   // 在工作台输出：'a'\r\n *   // 会触发事件冒泡，输出：'你点击了导航栏'\r\n *   // 但不会切换到 href 属性的页面地址，阻止了点击链接的默认行为\r\n *   stopEvent(evt)\r\n * })\r\n */\r\nconst preventDefault = function (evt) {\r\n  evt.preventDefault()\r\n}\r\n\r\nexport default preventDefault\r\n","/**\r\n * 终止事件在传播过程的捕获或冒泡的事件流\r\n * ========================================================================\r\n * @method stopPropagation\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Event/stopPropagation\r\n * @param {Event} evt - 事件对象\r\n *\r\n * @example\r\n * <div id=\"nav\" class=\"nav\">\r\n *   <a id=\"service\" class=\"anchor\" href=\"https://www.yaohaixiao.com/serivce\">Service</a>\r\n *   <a id=\"help\" class=\"anchor\" href=\"https://www.yaohaixiao.com/help\">Help</a>\r\n * </div>\r\n *\r\n * const $nav = document.querySelector('#nav')\r\n * const $service = document.querySelector('.anchor')\r\n *\r\n * on($nav, 'click', function(evt) {\r\n *   console.log('你点击了导航栏')\r\n * })\r\n *\r\n * on($anchor, 'click', function(evt) {\r\n *   console.log('tagName', this.tagName)\r\n *\r\n *   // 工作台输出：'a'\r\n *   // 然后跳转到 href 的地址\r\n *   // 但不会触发事件冒泡，输出：'你点击了导航栏'\r\n *   stopPropagation(evt)\r\n * })\r\n */\r\nconst stopPropagation = function (evt) {\r\n  evt.stopPropagation()\r\n}\r\n\r\nexport default stopPropagation\r\n","import stopPropagation from './stopPropagation'\r\nimport preventDefault from './preventDefault'\r\n\r\n/**\r\n * 停止事件（阻止默认行为和阻止事件的捕获或冒泡）\r\n * ========================================================================\r\n * @method stopEvent\r\n * @param {Event} evt - 事件对象\r\n *\r\n * @example\r\n * <div id=\"nav\" class=\"nav\">\r\n *   <a id=\"service\" class=\"anchor\" href=\"https://www.yaohaixiao.com/serivce\">Service</a>\r\n *   <a id=\"help\" class=\"anchor\" href=\"https://www.yaohaixiao.com/help\">Help</a>\r\n * </div>\r\n *\r\n * const $nav = document.querySelector('#nav')\r\n * const $service = document.querySelector('.anchor')\r\n *\r\n * on($nav, 'click', function(evt) {\r\n *   console.log('你点击了导航栏')\r\n * })\r\n *\r\n * on($anchor, 'click', function(evt) {\r\n *   console.log('tagName', this.tagName)\r\n *\r\n *   // 工作台输出：'a'\r\n *   // 不会触发事件冒泡，输出：'你点击了导航栏'\r\n *   // 也不会切换到 href 属性的页面，阻止了点击链接的默认行为\r\n *   stopEvent(evt)\r\n * })\r\n */\r\nconst stopEvent = function (evt) {\r\n  stopPropagation(evt)\r\n  preventDefault(evt)\r\n}\r\n\r\nexport default stopEvent\r\n","import createEvent from './createEvent'\r\nimport off from './off'\r\nimport at from './at'\r\nimport on from './on'\r\nimport only from './only'\r\nimport once from './once'\r\nimport focusin from './focusin'\r\nimport focusout from './focusout'\r\nimport isElement from './utils/isElement'\r\nimport isString from './utils/isString'\r\nimport getListeners from './getListeners'\r\nimport getTypes from './getTypes'\r\nimport hasEvent from './hasEvent'\r\nimport getPageX from './getPageX'\r\nimport getPageY from './getPageY'\r\nimport getPageXY from './getPageXY'\r\nimport getCharCode from './getCharCode'\r\nimport getRelatedTarget from './getRelatedTarget'\r\nimport getTarget from './getTarget'\r\nimport purgeElement from './purgeElement'\r\nimport destroy from './destroy'\r\nimport preventDefault from './preventDefault'\r\nimport stopPropagation from './stopPropagation'\r\nimport stopEvent from './stopEvent'\r\nimport stopImmediate from './stopImmediate'\r\nimport trigger from './trigger'\r\n\r\n/**\r\n * Emitter 类 - JavaScript 事件代理对象\r\n * ========================================================================\r\n */\r\nclass Emitter {\r\n  /**\r\n   * Emitter 构造函数\r\n   * ========================================================================\r\n   * @constructor\r\n   * @param {HTMLElement|String} el - （必须）DOM 元素或其选择器\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  constructor(el) {\r\n    if (isElement(el)) {\r\n      this.$el = el\r\n    } else {\r\n      if (isString(el)) {\r\n        this.$el = document.querySelector(el)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取 DOM 元素（type 事件类型）事件绑定信息\r\n   * ========================================================================\r\n   * 如果设置了事件类型 type， 则返回指定类型的事件绑定信息，否则返回所有事件绑定信息\r\n   * ========================================================================\r\n   * @method getListeners\r\n   * @param {String} [type] - （可选）事件类型\r\n   * @returns {Array} - 已绑定的事件信息\r\n   */\r\n  getListeners(type) {\r\n    return getListeners(this.$el, type)\r\n  }\r\n\r\n  /**\r\n   * 返回已绑定的事件类型的数组（去除名称重复的事件）\r\n   * ========================================================================\r\n   * @method getTypes\r\n   * @since 1.5.0\r\n   * @returns {Array}\r\n   */\r\n  getTypes() {\r\n    return getTypes(this.$el)\r\n  }\r\n\r\n  /**\r\n   * 判断是否已经（指定类型的）绑定事件\r\n   * ========================================================================\r\n   * @method hasEvent\r\n   * @since 1.4.0\r\n   * @param {String} [type] - （可选）事件名称：\r\n   *                           指定 type，则判断是否绑定 type 类型事件；\r\n   *                           未指定 type，则判断是否绑定任意类型的事件；\r\n   * @returns {Boolean}\r\n   */\r\n  hasEvent(type) {\r\n    return hasEvent(this.$el, type)\r\n  }\r\n\r\n  /**\r\n   * 获取事件触发时的 pageX 值\r\n   * ========================================================================\r\n   * @method getPageX\r\n   * @see getPageX\r\n   * @param {Event} evt - （必须）Event 对象\r\n   * @return {Number} - 返回事件触发时的 pageX 值\r\n   */\r\n  getPageX(evt) {\r\n    return getPageX(evt)\r\n  }\r\n\r\n  /**\r\n   * 获取事件触发时的 pageY 值\r\n   * ========================================================================\r\n   * @method getPageY\r\n   * @see getPageY\r\n   * @param {Event} evt - （必须）Event 对象\r\n   * @return {Number} - 返回事件触发时的 pageY 值\r\n   */\r\n  getPageY(evt) {\r\n    return getPageY(evt)\r\n  }\r\n\r\n  /**\r\n   * 获取事件触发时的 pageX 和 pageY 数组数据\r\n   * ========================================================================\r\n   * @method getPageXY\r\n   * @see getPageXY\r\n   * @param {Event} evt - （必须）Event 对象\r\n   * @return {Array} - 返回事件触发时的数组数据：[pageX, pageY]\r\n   */\r\n  getPageXY(evt) {\r\n    return getPageXY(evt)\r\n  }\r\n\r\n  /**\r\n   * 返回触发事件的 charCode\r\n   * ========================================================================\r\n   * @method getCharCode\r\n   * @see getCharCode\r\n   * @param {Event} evt - （必须）Event 对象\r\n   * @return {Number} - 返回事件的 charCode\r\n   */\r\n  getCharCode(evt) {\r\n    return getCharCode(evt)\r\n  }\r\n\r\n  /**\r\n   * 返回触发（鼠标）事件的 relatedTarget DOM 元素。\r\n   * ========================================================================\r\n   * MouseEvent.relatedTarget 只读属性是鼠标事件的次要目标（如果有）。相关的鼠标事件：\r\n   * mouseenter\r\n   * mouseleave\r\n   * mouseover\r\n   * mouseout\r\n   * dragenter\r\n   * dragleave\r\n   * ========================================================================\r\n   * @method getRelatedTarget\r\n   * @since 1.1.0\r\n   * @see https://developer.mozilla.org/en-US/docs/web/api/mouseevent/relatedtarget\r\n   * @param {Event} evt - Event 对象\r\n   * @return {HTMLElement} - Event 对象的 relatedTarget DOM 元素\r\n   */\r\n  getRelatedTarget(evt) {\r\n    return getRelatedTarget(evt)\r\n  }\r\n\r\n  /**\r\n   * 返回触发事件的 target DOM 元素\r\n   * ========================================================================\r\n   * @method getTarget\r\n   * @since 1.1.0\r\n   * @param {Event} evt - Event 对象\r\n   * @return {HTMLElement} - Event 对象的 target DOM 元素\r\n   */\r\n  getTarget(evt) {\r\n    return getTarget(evt)\r\n  }\r\n\r\n  /**\r\n   * 销毁（type 类型的）代理事件绑定\r\n   * ========================================================================\r\n   * 1. 设置了事件类型 type，则销毁指定类型的事件绑定，否则清除所有代理事件绑定\r\n   * 2. recurse 设置为 true，递归销毁子节点全部事件绑定\r\n   * ========================================================================\r\n   * @method purge\r\n   * @param {String} type  - （必须）事件类型\r\n   * @param {Boolean} [recurse]  - （可选）是否递归销毁子节点所有事件绑定\r\n   * 元素绑定的全部事件处理器\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  purge(type, recurse = false) {\r\n    purgeElement(this.$el, type, recurse)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 销毁所有已绑定的代理事件\r\n   * ========================================================================\r\n   * @method destroy\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  destroy() {\r\n    destroy(this.$el)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 创建自定义事件（CustomerEvent）\r\n   * ========================================================================\r\n   * @method createEvent\r\n   * @since 1.8.0\r\n   * @see createEvent\r\n   * @param {String} type - （必须）事件类型（名称）\r\n   * @param {Object} [detail] - （可选）传递给自定义事件的数据，默认为 null\r\n   * @param {Boolean} [bubbles] - （可选）是否支持冒泡，默认为 true\r\n   * @param {Boolean} [cancelable] - （可选）是否可以取消，默认为 true\r\n   * @returns {CustomEvent} - CustomerEvent 实例\r\n   */\r\n  createEvent(type, detail = null, bubbles = true, cancelable = true) {\r\n    return createEvent(type, detail, bubbles, cancelable)\r\n  }\r\n\r\n  /**\r\n   * 取消 type 类型的代理事件绑定\r\n   * ========================================================================\r\n   * 如果没有设置 handler，则销毁 this.$options 绑定的所有符合 type 事件类型的事件绑定\r\n   * ========================================================================\r\n   * @method off\r\n   * @param {String} type - （必须）事件类型\r\n   * @param {Function} [handler] - （可选）事件处理器回调函数\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  off(type, handler) {\r\n    off(this.$el, type, handler)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绑定事件\r\n   * ========================================================================\r\n   * @method at\r\n   * @param {String|Function} type - （必须）事件类型或者事件处理器回调函数\r\n   * @param {Function|Object} fn - （必须） 事件处理器回调函数或者传递给事件处理器回调函数的数据对象\r\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象或者事件处理器回调函数的 this 上下文指向，\r\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向，或者是否仅触发一次\r\n   * 当设置为 true 时，则事件处理器回调函数的 this 上下文指向为 data 对象\r\n   * @param {Boolean} once - （可选）是否仅触发一次\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  at(type, fn, data, context, once = false) {\r\n    at(this.$el, type, fn, data, context, once)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绑定代理事件\r\n   * ========================================================================\r\n   * @method on\r\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n   * @param {String} type - （必须）事件类型\r\n   * @param {Function} handler - （必须） 事件处理器回调函数\r\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\r\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向：\r\n   * 当设置为 true 时，则事件处理器回调函数的 this 上下文指向为 data 对象；\r\n   * 如未指定 context，则事件处理器回调函数的 this 上下文指向为 Emitter 对象；\r\n   * @param {Boolean} [once] - （可选）是否仅触发一次\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  on(selector, type, handler, data, context, once = false) {\r\n    on(this.$el, selector, type, handler, data, context || this, once)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绑定仅触发一次的事件\r\n   * ========================================================================\r\n   * @method only\r\n   * @param {String} type - （必须）事件类型\r\n   * @param {Function} handler - （必须） 事件处理器回调函数\r\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\r\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  only(type, handler, data, context) {\r\n    only(this.$el, type, handler, data, context)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绑定仅触发一次的代理事件\r\n   * ========================================================================\r\n   * @method once\r\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n   * @param {String} type - （必须）事件类型\r\n   * @param {Function} handler - （必须） 事件处理器回调函数\r\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\r\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  once(selector, type, handler, data, context) {\r\n    once(this.$el, selector, type, handler, data, context)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绑定 click 代理事件\r\n   * ========================================================================\r\n   * @method click\r\n   * @since 1.4.0\r\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/click_event\r\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n   * @param {Function} handler - （必须） 事件处理器回调函数\r\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\r\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\r\n   * @param {Boolean} [once] - （可选）是否仅触发一次\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  click(selector, handler, data, context, once = false) {\r\n    on(this.$el, selector, 'click', handler, data, context, once)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绑定 dbclick 代理事件\r\n   * ========================================================================\r\n   * @method dbclick\r\n   * @since 1.7.0\r\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/dblclick_event\r\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n   * @param {Function} handler - （必须） 事件处理器回调函数\r\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\r\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\r\n   * @param {Boolean} [once] - （可选）是否仅触发一次\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  dbclick(selector, handler, data, context, once = false) {\r\n    on(this.$el, selector, 'dbclick', handler, data, context, once)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绑定 mouseenter 代理事件\r\n   * ========================================================================\r\n   * @method mouseenter\r\n   * @since 1.4.0\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event\r\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n   * @param {Function} handler - （必须） 事件处理器回调函数\r\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\r\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\r\n   * @param {Boolean} [once] - （可选）是否仅触发一次\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  mouseenter(selector, handler, data, context, once = false) {\r\n    on(this.$el, selector, 'mouseenter', handler, data, context, once)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绑定 mouseleave 代理事件\r\n   * ========================================================================\r\n   * @method mouseleave\r\n   * @since 1.4.0\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event\r\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n   * @param {Function} handler - （必须） 事件处理器回调函数\r\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\r\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\r\n   * @param {Boolean} [once] - （可选）是否仅触发一次\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  mouseleave(selector, handler, data, context, once = false) {\r\n    on(this.$el, selector, 'mouseleave', handler, data, context, once)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绑定 mousedown 代理事件\r\n   * ========================================================================\r\n   * @method mousedown\r\n   * @since 1.7.0\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event\r\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n   * @param {Function} handler - （必须） 事件处理器回调函数\r\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\r\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\r\n   * @param {Boolean} [once] - （可选）是否仅触发一次\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  mousedown(selector, handler, data, context, once = false) {\r\n    on(this.$el, selector, 'mousedown', handler, data, context, once)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绑定 mouseup 代理事件\r\n   * ========================================================================\r\n   * @method mouseup\r\n   * @since 1.7.0\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event\r\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n   * @param {Function} handler - （必须） 事件处理器回调函数\r\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\r\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\r\n   * @param {Boolean} [once] - （可选）是否仅触发一次\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  mouseup(selector, handler, data, context, once = false) {\r\n    on(this.$el, selector, 'mouseup', handler, data, context, once)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绑定 mouseover 代理事件\r\n   * ========================================================================\r\n   * @method mouseover\r\n   * @since 1.7.0\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event\r\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n   * @param {Function} handler - （必须） 事件处理器回调函数\r\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\r\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\r\n   * @param {Boolean} [once] - （可选）是否仅触发一次\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  mouseover(selector, handler, data, context, once = false) {\r\n    on(this.$el, selector, 'mouseover', handler, data, context, once)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绑定 mousemove 代理事件\r\n   * ========================================================================\r\n   * @method mousemove\r\n   * @since 1.7.0\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event\r\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n   * @param {Function} handler - （必须） 事件处理器回调函数\r\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\r\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\r\n   * @param {Boolean} [once] - （可选）是否仅触发一次\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  mousemove(selector, handler, data, context, once = false) {\r\n    on(this.$el, selector, 'mousemove', handler, data, context, once)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绑定 mouseout 代理事件\r\n   * ========================================================================\r\n   * @method mouseout\r\n   * @since 1.7.0\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event\r\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n   * @param {Function} handler - （必须） 事件处理器回调函数\r\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\r\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\r\n   * @param {Boolean} [once] - （可选）是否仅触发一次\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  mouseout(selector, handler, data, context, once = false) {\r\n    on(this.$el, selector, 'mouseout', handler, data, context, once)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绑定 drag 代理事件\r\n   * ========================================================================\r\n   * @method drag\r\n   * @since 1.7.0\r\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/drag_event\r\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n   * @param {Function} handler - （必须） 事件处理器回调函数\r\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\r\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\r\n   * @param {Boolean} [once] - （可选）是否仅触发一次\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  drag(selector, handler, data, context, once = false) {\r\n    on(this.$el, selector, 'drag', handler, data, context, once)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绑定 dragend 代理事件\r\n   * ========================================================================\r\n   * @method dragend\r\n   * @since 1.7.0\r\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/dragend_event\r\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n   * @param {Function} handler - （必须） 事件处理器回调函数\r\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\r\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\r\n   * @param {Boolean} [once] - （可选）是否仅触发一次\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  dragend(selector, handler, data, context, once = false) {\r\n    on(this.$el, selector, 'dragend', handler, data, context, once)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绑定 dragenter 代理事件\r\n   * ========================================================================\r\n   * @method dragenter\r\n   * @since 1.7.0\r\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/dragenter_event\r\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n   * @param {Function} handler - （必须） 事件处理器回调函数\r\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\r\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\r\n   * @param {Boolean} [once] - （可选）是否仅触发一次\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  dragenter(selector, handler, data, context, once = false) {\r\n    on(this.$el, selector, 'dragenter', handler, data, context, once)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绑定 dragleave 代理事件\r\n   * ========================================================================\r\n   * @method dragleave\r\n   * @since 1.7.0\r\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/dragleave_event\r\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n   * @param {Function} handler - （必须） 事件处理器回调函数\r\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\r\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\r\n   * @param {Boolean} [once] - （可选）是否仅触发一次\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  dragleave(selector, handler, data, context, once = false) {\r\n    on(this.$el, selector, 'dragleave', handler, data, context, once)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绑定 dragover 代理事件\r\n   * ========================================================================\r\n   * @method dragover\r\n   * @since 1.7.0\r\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/dragover_event\r\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n   * @param {Function} handler - （必须） 事件处理器回调函数\r\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\r\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\r\n   * @param {Boolean} [once] - （可选）是否仅触发一次\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  dragover(selector, handler, data, context, once = false) {\r\n    on(this.$el, selector, 'dragover', handler, data, context, once)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绑定 dragstart 代理事件\r\n   * ========================================================================\r\n   * @method dragstart\r\n   * @since 1.7.0\r\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/dragstart_event\r\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n   * @param {Function} handler - （必须） 事件处理器回调函数\r\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\r\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\r\n   * @param {Boolean} [once] - （可选）是否仅触发一次\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  dragstart(selector, handler, data, context, once = false) {\r\n    on(this.$el, selector, 'dragstart', handler, data, context, once)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绑定 drop 代理事件\r\n   * ========================================================================\r\n   * @method drop\r\n   * @since 1.7.0\r\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/drop_event\r\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n   * @param {Function} handler - （必须） 事件处理器回调函数\r\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\r\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\r\n   * @param {Boolean} [once] - （可选）是否仅触发一次\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  drop(selector, handler, data, context, once = false) {\r\n    on(this.$el, selector, 'drop', handler, data, context, once)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绑定 wheel 代理事件\r\n   * ========================================================================\r\n   * @method wheel\r\n   * @since 1.7.0\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event\r\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n   * @param {Function} handler - （必须） 事件处理器回调函数\r\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\r\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\r\n   * @param {Boolean} [once] - （可选）是否仅触发一次\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  wheel(selector, handler, data, context, once = false) {\r\n    on(this.$el, selector, 'wheel', handler, data, context, once)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绑定 contextmenu 代理事件\r\n   * ========================================================================\r\n   * @method contextmenu\r\n   * @since 1.7.0\r\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/contextmenu_event\r\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n   * @param {Function} handler - （必须） 事件处理器回调函数\r\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\r\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\r\n   * @param {Boolean} [once] - （可选）是否仅触发一次\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  contextmenu(selector, handler, data, context, once = false) {\r\n    on(this.$el, selector, 'contextmenu', handler, data, context, once)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绑定 focusin 或者 focus 代理事件\r\n   * ========================================================================\r\n   * @method focusin\r\n   * @since 1.4.0\r\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/focus_event\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event\r\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n   * @param {Function} handler - （必须） 事件处理器回调函数\r\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\r\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\r\n   * @param {Boolean} [once] - （可选）是否仅触发一次\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  focusin(selector, handler, data, context, once = false) {\r\n    focusin(this.$el, selector, handler, data, context, once)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绑定 focusout 或者 blur 代理事件\r\n   * ========================================================================\r\n   * @method focusout\r\n   * @since 1.4.0\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event\r\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n   * @param {Function} handler - （必须） 事件处理器回调函数\r\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\r\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\r\n   * @param {Boolean} [once] - （可选）是否仅触发一次\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  focusout(selector, handler, data, context, once = false) {\r\n    focusout(this.$el, selector, handler, data, context, once)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绑定 change 代理事件\r\n   * ========================================================================\r\n   * @method change\r\n   * @since 1.7.0\r\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/change_event\r\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n   * @param {Function} handler - （必须） 事件处理器回调函数\r\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\r\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\r\n   * @param {Boolean} [once] - （可选）是否仅触发一次\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  change(selector, handler, data, context, once = false) {\r\n    on(this.$el, selector, 'change', handler, data, context, once)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绑定 input 代理事件\r\n   * ========================================================================\r\n   * @method input\r\n   * @since 1.7.0\r\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/input_event\r\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n   * @param {Function} handler - （必须） 事件处理器回调函数\r\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\r\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\r\n   * @param {Boolean} [once] - （可选）是否仅触发一次\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  input(selector, handler, data, context, once = false) {\r\n    on(this.$el, selector, 'input', handler, data, context, once)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绑定 compositionstart 代理事件\r\n   * ========================================================================\r\n   * @method compositionstart\r\n   * @since 1.7.0\r\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/compositionstart_event\r\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n   * @param {Function} handler - （必须） 事件处理器回调函数\r\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\r\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\r\n   * @param {Boolean} [once] - （可选）是否仅触发一次\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  compositionstart(selector, handler, data, context, once = false) {\r\n    on(this.$el, selector, 'compositionstart', handler, data, context, once)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绑定 compositionupdate 代理事件\r\n   * ========================================================================\r\n   * @method compositionupdate\r\n   * @since 1.7.0\r\n   * @see  https://developer.mozilla.org/zh-CN/docs/Web/API/Element/compositionupdate_event\r\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n   * @param {Function} handler - （必须） 事件处理器回调函数\r\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\r\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\r\n   * @param {Boolean} [once] - （可选）是否仅触发一次\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  compositionupdate(selector, handler, data, context, once = false) {\r\n    on(this.$el, selector, 'compositionupdate', handler, data, context, once)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绑定 compositionend 代理事件\r\n   * ========================================================================\r\n   * @method compositionend\r\n   * @since 1.7.0\r\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/compositionend_event\r\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n   * @param {Function} handler - （必须） 事件处理器回调函数\r\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\r\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\r\n   * @param {Boolean} [once] - （可选）是否仅触发一次\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  compositionend(selector, handler, data, context, once = false) {\r\n    on(this.$el, selector, 'compositionend', handler, data, context, once)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绑定 paste 代理事件\r\n   * ========================================================================\r\n   * @method paste\r\n   * @since 1.7.0\r\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/paste_event\r\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n   * @param {Function} handler - （必须） 事件处理器回调函数\r\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\r\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\r\n   * @param {Boolean} [once] - （可选）是否仅触发一次\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  paste(selector, handler, data, context, once = false) {\r\n    on(this.$el, selector, 'paste', handler, data, context, once)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绑定 copy 代理事件\r\n   * ========================================================================\r\n   * @method copy\r\n   * @since 1.7.0\r\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/copy_event\r\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n   * @param {Function} handler - （必须） 事件处理器回调函数\r\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\r\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\r\n   * @param {Boolean} [once] - （可选）是否仅触发一次\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  copy(selector, handler, data, context, once = false) {\r\n    on(this.$el, selector, 'copy', handler, data, context, once)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绑定 cut 代理事件\r\n   * ========================================================================\r\n   * @method cut\r\n   * @since 1.7.0\r\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/cut_event\r\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n   * @param {Function} handler - （必须） 事件处理器回调函数\r\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\r\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\r\n   * @param {Boolean} [once] - （可选）是否仅触发一次\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  cut(selector, handler, data, context, once = false) {\r\n    on(this.$el, selector, 'cut', handler, data, context, once)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绑定 keydown 代理事件\r\n   * ========================================================================\r\n   * @method keydown\r\n   * @since 1.7.0\r\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n   * @param {Function} handler - （必须） 事件处理器回调函数\r\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\r\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\r\n   * @param {Boolean} [once] - （可选）是否仅触发一次\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  keydown(selector, handler, data, context, once = false) {\r\n    on(this.$el, selector, 'keydown', handler, data, context, once)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绑定 keyup 代理事件\r\n   * ========================================================================\r\n   * @method keyup\r\n   * @since 1.7.0\r\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n   * @param {Function} handler - （必须） 事件处理器回调函数\r\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\r\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\r\n   * @param {Boolean} [once] - （可选）是否仅触发一次\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  keyup(selector, handler, data, context, once = false) {\r\n    on(this.$el, selector, 'keyup', handler, data, context, once)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绑定 error 代理事件\r\n   * ========================================================================\r\n   * @method error\r\n   * @since 1.7.0\r\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/error_event\r\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n   * @param {Function} handler - （必须） 事件处理器回调函数\r\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\r\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\r\n   * @param {Boolean} [once] - （可选）是否仅触发一次\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  error(selector, handler, data, context, once = false) {\r\n    on(this.$el, selector, 'error', handler, data, context, once)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 触发代理自定义事件\r\n   * ========================================================================\r\n   * @method trigger\r\n   * @since 1.6.0\r\n   * @param {String} type - （必须）事件类型\r\n   * @param {String} selector - （必须）选择器\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  trigger(type, selector) {\r\n    trigger(this.$el, type, selector)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 阻止事件的默认行为\r\n   * ========================================================================\r\n   * @method preventDefault\r\n   * @see preventDefault\r\n   * @param {Event} evt - （必须）Event 对象\r\n   * @returns {Emitter}  - Emitter 对象\r\n   */\r\n  preventDefault(evt) {\r\n    preventDefault(evt)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 终止事件在传播过程的捕获或冒泡的事件流\r\n   * ========================================================================\r\n   * @method stopPropagation\r\n   * @see stopPropagation\r\n   * @param {Event} evt - （必须）Event 对象\r\n   * @returns {Emitter}  - Emitter 对象\r\n   */\r\n  stopPropagation(evt) {\r\n    stopPropagation(evt)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 停止事件（阻止默认行为和阻止事件的捕获或冒泡）\r\n   * ========================================================================\r\n   * @method stopEvent\r\n   * @see stopEvent\r\n   * @param {Event} evt - （必须）Event 对象\r\n   * @returns {Emitter}  - Emitter 对象\r\n   */\r\n  stopEvent(evt) {\r\n    stopEvent(evt)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 阻止监听同一事件的其他事件监听器被调用，并且阻止默认行为和事件冒泡。\r\n   * ========================================================================\r\n   * @method stopImmediate\r\n   * @since 1.8.0\r\n   * @see stopImmediate\r\n   * @param {Event} evt - （必须）Event 对象\r\n   */\r\n  stopImmediate(evt) {\r\n    stopImmediate(evt)\r\n\r\n    return this\r\n  }\r\n}\r\n\r\nexport default Emitter\r\n","import isString from './utils/isString'\r\nimport getTypes from './getTypes'\r\n\r\n/**\r\n * 判断是否已经（指定类型的）绑定事件\r\n * ========================================================================\r\n * @method hasEvent\r\n * @param {HTMLElement} el - 要检测是否绑定事件的 DOM 元素\r\n * @param {String} [type] - （可选）事件名称：\r\n *                           指定 type，则判断是否绑定 type 类型事件；\r\n *                           未指定 type，则判断是否绑定任意类型的事件；\r\n * @returns {Boolean}\r\n */\r\nconst hasEvent = (el, type) => {\r\n  const types = getTypes(el)\r\n  let result\r\n\r\n  if (types.length < 1) {\r\n    return false\r\n  }\r\n\r\n  result = types.length > 0\r\n\r\n  /* istanbul ignore else */\r\n  if (type && isString(type)) {\r\n    result = types.indexOf(type) > -1\r\n  }\r\n\r\n  return result\r\n}\r\n\r\nexport default hasEvent\r\n","import getPageX from './getPageX'\r\nimport getPageY from './getPageY'\r\n\r\n/**\r\n * 获取事件触发时的 pageX 和 pageY 数组数据\r\n * ========================================================================\r\n * @method getPageXY\r\n * @param {Event} evt - （必须）Event 对象\r\n * @return {Array} - 返回事件触发时的数组数据：[pageX, pageY]\r\n */\r\nconst getPageXY = function (evt) {\r\n  return [getPageX(evt), getPageY(evt)]\r\n}\r\n\r\nexport default getPageXY\r\n","import resolveTextNode from './resolveTextNode'\r\n\r\n/**\r\n * 返回触发（鼠标）事件的 relatedTarget DOM 元素。\r\n * ========================================================================\r\n * MouseEvent.relatedTarget 只读属性是鼠标事件的次要目标（如果有）。相关的鼠标事件：\r\n * mouseenter\r\n * mouseleave\r\n * mouseover\r\n * mouseout\r\n * dragenter\r\n * dragleave\r\n * ========================================================================\r\n * @method getRelatedTarget\r\n * @see https://developer.mozilla.org/en-US/docs/web/api/mouseevent/relatedtarget\r\n * @param {Event} evt - Event 对象\r\n * @return {HTMLElement} - Event 对象的 relatedTarget DOM 元素\r\n */\r\nconst getRelatedTarget = function (evt) {\r\n  let target = evt.relatedTarget\r\n  const type = evt.type\r\n\r\n  if (!target) {\r\n    if (type === 'mouseout') {\r\n      target = evt.toElement\r\n    } else if (type === 'mouseover') {\r\n      target = evt.fromElement\r\n    }\r\n  }\r\n\r\n  return resolveTextNode(target)\r\n}\r\n\r\nexport default getRelatedTarget\r\n","import getTypes from './getTypes'\r\nimport purgeElement from './purgeElement'\r\n\r\n/**\r\n * 销毁所有已绑定的代理事件\r\n * ========================================================================\r\n * @method destroy\r\n * @param {HTMLElement} el - 需要解除所有事件绑定的 DOM 元素\r\n * @returns {Emitter} - Emitter 对象\r\n */\r\nconst destroy = (el) => {\r\n  const types = getTypes(el)\r\n\r\n  types.forEach((type) => {\r\n    purgeElement(el, type, true)\r\n  })\r\n}\r\n\r\nexport default destroy\r\n","import at from './at'\r\n\r\n/**\r\n * 绑定只触发一次的事件\r\n * ========================================================================\r\n * @method once\r\n * @param {HTMLElement} el - （必须）绑定代理事件的 DOM 节点\r\n * @param {String} type - （必须）事件类型\r\n * @param {Function} fn - （必须） 事件处理器回调函数\r\n * @param {Object} data - （可选）传递给事件处理器回调函数的数据对象\r\n * @param {Object|Boolean} context - （可选）事件处理器回调函数的 this 上下文指向，\r\n * 当设置为 true 时，则事件处理器回调函数的 this 上下文指向为 data 对象\r\n */\r\nconst only = (el,  type, fn, data, context) => {\r\n  at(el, type, fn, data, context, true)\r\n}\r\n\r\nexport default only\r\n","import on from './on'\r\n\r\n/**\r\n * 绑定只触发一次的事件\r\n * ========================================================================\r\n * @method once\r\n * @param {HTMLElement} el - （必须）绑定代理事件的 DOM 节点\r\n * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n * @param {String} type - （必须）事件类型\r\n * @param {Function} fn - （必须） 事件处理器回调函数\r\n * @param {Object} data - （可选）传递给事件处理器回调函数的数据对象\r\n * @param {Object|Boolean} context - （可选）事件处理器回调函数的 this 上下文指向，\r\n * 当设置为 true 时，则事件处理器回调函数的 this 上下文指向为 data 对象\r\n */\r\nconst once = (el, selector, type, fn, data, context) => {\r\n  on(el, selector, type, fn, data, context, true)\r\n}\r\n\r\nexport default once\r\n","import isIE from './utils/isIE'\r\nimport on from './on'\r\n\r\n/**\r\n * 绑定 focusin 或者 focus 代理事件\r\n * ========================================================================\r\n * @method focusin\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/focus_event\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event\r\n * @param {HTMLElement} el - （必须）绑定代理事件的 DOM 节点\r\n * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n * @param {Function} fn - （必须） 事件处理器回调函数\r\n * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\r\n * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向，\r\n * 当设置为 true 时，则事件处理器回调函数的 this 上下文指向为 data 对象\r\n * @param {Boolean} [once] - （可选）是否仅触发一次\r\n */\r\nconst focusin = function (el, selector, fn, data, context, once = false) {\r\n  const FOCUSIN = isIE() ? 'focusin' : 'focus'\r\n\r\n  return on(el, selector, FOCUSIN, fn, data, context, once)\r\n}\r\n\r\nexport default focusin\r\n","import isIE from './utils/isIE'\r\nimport on from './on'\r\n\r\n/**\r\n * 绑定 focusout 或者 blur 代理事件\r\n * ========================================================================\r\n * @method focusout\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event\r\n * @param {HTMLElement} el - （必须）绑定代理事件的 DOM 节点\r\n * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n * @param {Function} fn - （必须） 事件处理器回调函数\r\n * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\r\n * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向，\r\n * 当设置为 true 时，则事件处理器回调函数的 this 上下文指向为 data 对象\r\n * @param {Boolean} [once] - （可选）是否仅触发一次\r\n */\r\nconst focusout = function (el, selector, fn, data, context, once = false) {\r\n  const FOCUSOUT = isIE() ? 'focusout' : 'blur'\r\n\r\n  on(el, selector, FOCUSOUT, fn, data, context, once)\r\n}\r\n\r\nexport default focusout\r\n","import createEvent from './createEvent'\r\n\r\n/**\r\n * 触发代理自定义事件\r\n * ========================================================================\r\n * trigger() 方法也可以用来手动触发内置的事件，例如 click, mouseenter 等事件，通常\r\n * 使用 trigger() 来手动触发用户自定义事件。\r\n *\r\n * 另外，选择器 selector 的匹配使用 document.querySelector() 方法，因此仅事件触发一次。\r\n * ========================================================================\r\n * @method trigger\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/CustomEvent\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/dispatchEvent\r\n * @param {HTMLElement} el - （必须）绑定代理事件的 DOM 元素\r\n * @param {String} type - （必须）事件类型\r\n * @param {String} [selector] - （可选）选择器，没有选择器，则直接触发 el 元素上的自定义事件\r\n *\r\n * @example\r\n * const $list = document.querySelector('#list')\r\n *\r\n * // 绑定 alert 自定义事件\r\n * on($list, '.item', 'alert', itemHandler)\r\n * on($list, '.remove', 'alert', removeHandler)\r\n *\r\n * // 触发 $list 下匹配 '.item' 元素手动触发 alert 自定义事件\r\n * trigger($list, 'alert', '.item')\r\n *\r\n * // 可以使用伪类选择器，更精确的匹配元素\r\n * trigger($list, 'alert', '.item:last-child')\r\n *\r\n * // 触发 $list 下匹配 '.remove' 元素手动触发 alert 自定义事件\r\n * trigger($list, 'alert', '.remove')\r\n * trigger($list, 'alert', '.remove:nth-child(2)')\r\n *\r\n * // 没有选择器，则直接触发 el 元素上的自定义事件\r\n * trigger($list, 'alert')\r\n */\r\nconst trigger = (el, type, selector) => {\r\n  let $element\r\n\r\n  if (!type) {\r\n    return false\r\n  }\r\n\r\n  if (selector) {\r\n    $element = el.querySelector(selector)\r\n  } else {\r\n    $element = el\r\n  }\r\n\r\n  if (!$element) {\r\n    return false\r\n  }\r\n\r\n  $element.dispatchEvent(createEvent(type))\r\n}\r\n\r\nexport default trigger\r\n","import stopEvent from './stopEvent'\r\n\r\n/**\r\n * 阻止监听同一事件的其他事件监听器被调用，并且阻止默认行为和事件冒泡。\r\n * ========================================================================\r\n * @method stopImmediate\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Event/stopImmediatePropagation\r\n * @param {Event} evt - （必须）Event 对象\r\n *\r\n * @example\r\n * <div id=\"nav\" class=\"nav\">\r\n *   <a id=\"service\" class=\"anchor\" href=\"https://www.yaohaixiao.com/serivce\">Service</a>\r\n *   <a id=\"help\" class=\"anchor\" href=\"https://www.yaohaixiao.com/help\">Help</a>\r\n * </div>\r\n *\r\n * const $nav = document.querySelector('#nav')\r\n * const $service = document.querySelector('#service')\r\n * const logHandler = function(evt) {\r\n *   console.log(evt.target)\r\n * }\r\n * const styleHandler = function(evt) {\r\n *   $nav.classList.add('checked')\r\n * }\r\n * const serviceHandler = function(evt) {\r\n *   alert(evt.target)\r\n *   stopImmediate(evt)\r\n * }\r\n * const removeHandler = function(evt) {\r\n *   const $target = evt.target\r\n *\r\n *   $target.parentNode.removeChild($target)\r\n * }\r\n *\r\n * $nav.addEventListener('click', logHandler)\r\n * $nav.addEventListener('click', styleHandler)\r\n * $service.addEventListener('click', serviceHandler)\r\n * $service.addEventListener('click', removeHandler)\r\n *\r\n * $nav.click()\r\n * // => 触发 logHandler 和 styleHandler\r\n *\r\n * $service.click()\r\n * // => 仅触发 serviceHandler，不会触发 removeHandler\r\n * // => 并且不会跳转页面，也不会冒泡到 $nav，不会触发 logHandler 和 styleHandler\r\n */\r\nconst stopImmediate = function (evt) {\r\n  stopEvent(evt)\r\n  evt.stopImmediatePropagation()\r\n}\r\n\r\nexport default stopImmediate\r\n","import Emitter from './emitter'\r\n\r\nconst delegate = (el) => {\r\n  return new Emitter(el)\r\n}\r\n\r\nexport default delegate\r\n"],"names":["createEvent","type","detail","bubbles","cancelable","CustomEvent","isString","val","isElement","el","nodeName","tagName","nodeType","getListeners","listeners","_listeners","filter","listener","CAPTURE_EVENTS","_off","fn","capture","indexOf","_delegateListener","index","length","forEach","i","handler","splice","_delete","removeEventListener","purgeElement","recurse","$element","document","querySelector","$children","childNodes","arguments","$child","isFunction","Object","prototype","toString","apply","_typeof","off","at","data","context","once","evt","overrideContext","call","push","addEventListener","matches","selector","sel","replace","msMatchesSelector","getParentOrHost","host","parentNode","resolveTextNode","getTarget","target","on","delegateTarget","ctx","includeCTX","closest","isIE","agent","navigator","userAgent","match","getTypes","types","Set","getScroll","$body","documentElement","body","scrollXY","scrollTop","scrollLeft","getPageX","x","pageX","clientX","getPageY","y","pageY","clientY","getCharCode","code","keyCode","charCode","webkitKeymap","UA","test","isAppleSafari","preventDefault","stopPropagation","stopEvent","Emitter","constructor","this","$el","hasEvent","result","getPageXY","getRelatedTarget","relatedTarget","toElement","fromElement","purge","destroy","only","click","dbclick","mouseenter","mouseleave","mousedown","mouseup","mouseover","mousemove","mouseout","drag","dragend","dragenter","dragleave","dragover","dragstart","drop","wheel","contextmenu","focusin","FOCUSIN","focusout","FOCUSOUT","change","input","compositionstart","compositionupdate","compositionend","paste","copy","cut","keydown","keyup","error","trigger","dispatchEvent","stopImmediate","stopImmediatePropagation"],"mappings":"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"}