{"version":3,"file":"docs.min.js","sources":["../../node_modules/@yaohaixiao/subscribers.js/_subscribers.js","../../node_modules/@yaohaixiao/subscribers.js/utils/hasOwn.js","../../node_modules/@yaohaixiao/subscribers.js/_hasDirectSubscribersFor.js","../../node_modules/@yaohaixiao/subscribers.js/has.js","../../node_modules/@yaohaixiao/subscribers.js/_hasSubscribers.js","../../node_modules/@yaohaixiao/subscribers.js/emit.js","../../node_modules/@yaohaixiao/subscribers.js/utils/isTypedArray.js","../../node_modules/@yaohaixiao/subscribers.js/utils/guid.js","../../node_modules/@yaohaixiao/subscribers.js/on.js","../../node_modules/@yaohaixiao/subscribers.js/utils/isFunction.js","../../node_modules/@yaohaixiao/subscribers.js/_removeSubscriber.js","../../node_modules/@yaohaixiao/subscribers.js/off.js","../../node_modules/@yaohaixiao/subscribers.js/_removeSubscriberByToken.js","../../node_modules/@yaohaixiao/subscribers.js/subscribers.core.js","../../api/js/scroller.js","../../createEvent.js","../../utils/isString.js","../../utils/isElement.js","../../getListeners.js","../../enum.js","../../_off.js","../../_delete.js","../../purgeElement.js","../../utils/isFunction.js","../../utils/_typeof.js","../../off.js","../../at.js","../../matches.js","../../getParentOrHost.js","../../resolveTextNode.js","../../getTarget.js","../../on.js","../../closest.js","../../utils/isIE.js","../../getTypes.js","../../getScroll.js","../../getPageX.js","../../getScrollLeft.js","../../getPageY.js","../../getScrollTop.js","../../getCharCode.js","../../utils/isAppleSafari.js","../../preventDefault.js","../../stopPropagation.js","../../stopEvent.js","../../emitter.js","../../hasEvent.js","../../getPageXY.js","../../getRelatedTarget.js","../../destroy.js","../../only.js","../../once.js","../../focusin.js","../../focusout.js","../../trigger.js","../../stopImmediate.js","../../delegate.js","../../api/js/anchors.js","../../api/js/buttons.js","../../api/js/docs.js","../../api/js/main.js"],"sourcesContent":["/**\n * 存储订阅者（主题和处理器的）私有对象\n * ========================================================================\n * @type {{}}\n * @private\n */\nconst _subscribers = {}\n\nexport default _subscribers\n","/**\n * 检测对象自身属性中是否具有指定的属性。\n * ========================================================================\n * @method hasOwn\n * @param {Object} obj - （必须）检测的目标对象\n * @param {String} prop - （必须）属性名\n * @returns {Boolean}\n */\nconst hasOwn = (obj, prop) => {\n  const hasOwnProperty = Object.prototype.hasOwnProperty\n  return obj && hasOwnProperty.call(obj, prop)\n}\n\nexport default hasOwn\n","import _subscribers from './_subscribers'\nimport hasOwn from './utils/hasOwn'\n\n/**\n * 判断是否存在与给定 topic 完全匹配的订阅者信息\n * ========================================================================\n * @method _hasDirectSubscribersFor\n * @param {String} topic - （必须）订阅主题字符串\n * @returns {Boolean}\n */\nconst _hasDirectSubscribersFor = (topic) => {\n  return hasOwn(_subscribers, topic) && _subscribers[topic].length > 0\n}\n\nexport default _hasDirectSubscribersFor\n","import _hasDirectSubscribersFor from './_hasDirectSubscribersFor'\nimport _hasSubscribers from './_hasSubscribers'\n\n/**\n * 判断是否存在包含 topic 指定的订阅者信息\n * ========================================================================\n * @method has\n * @param {String} topic - （必须）主题名称\n * @param {Boolean} [isDirect] - （可选）是否为直接的主题，默认值：true\n * @returns {Boolean}\n */\nconst has = (topic, isDirect = true) => {\n  return isDirect ? _hasDirectSubscribersFor(topic) : _hasSubscribers(topic)\n}\n\nexport default has\n","import _hasDirectSubscribersFor from './_hasDirectSubscribersFor'\n\n/**\n * 判断是否存在包含给定 topic 相关的订阅者信息\n * ========================================================================\n * @method _hasSubscribers\n * @param {String} topic - （必须）订阅主题字符串\n * @returns {Boolean}\n */\nconst _hasSubscribers = (topic) => {\n  let found = _hasDirectSubscribersFor(topic)\n  let position = topic.lastIndexOf('.')\n\n  while (!found && position !== -1) {\n    topic = topic.substring(0, position)\n    position = topic.lastIndexOf('.')\n    found = _hasDirectSubscribersFor(topic)\n  }\n\n  return found\n}\n\nexport default _hasSubscribers\n","import _subscribers from './_subscribers'\nimport has from './has'\nimport _hasDirectSubscribersFor from './_hasDirectSubscribersFor'\nimport isTypedArray from './utils/isTypedArray'\n\n/**\n * （异步）发布订阅主题信息\n * ========================================================================\n * 主题默认是异步发布的。确保在消费者处理主题时，主题的发起者不会被阻止。\n * ========================================================================\n * @method emit\n * @param {String} topic - （必须）主题名称\n * @param {Object} data - （必须）数据对象\n * @param {Boolean} async - (可选) 是否异步发布\n */\nconst emit = (topic, data, async = true) => {\n  const execute = (topic) => {\n    if (!_hasDirectSubscribersFor(topic)) {\n      return false\n    }\n\n    _subscribers[topic].forEach((subscriber) => {\n      // 针对 mqtt 消息服务返回的 Uint8Array 类似的 typed arrays 格式的数据\n      // 采用 toString() 方法转化为普通（JSON）字符串\n      const message = isTypedArray(data) ? data.toString() : data\n      subscriber.callback(message)\n    })\n  }\n  const deliver = () => {\n    let subscriber = topic\n    let position = topic.lastIndexOf('.')\n\n    while (position !== -1) {\n      subscriber = subscriber.substring(0, position)\n      position = subscriber.lastIndexOf('.')\n\n      execute(subscriber)\n    }\n\n    // 执行 topic 对应的处理器\n    execute(topic)\n    // 执行特殊 topic：'*'（监听全部消息的发布）\n    execute('*')\n  }\n\n  if (!has(topic)) {\n    return false\n  }\n\n  if (async) {\n    setTimeout(deliver, 10)\n  } else {\n    deliver()\n  }\n}\n\nexport default emit\n","/**\n * 判断检测数据是否为 Typed Arrays 类型的数据\n * ========================================================================\n * @param {*} val\n * @returns {boolean}\n */\nconst isTypedArray = (val) => {\n  const TYPES = [\n    '[object Int8Array]',\n    '[object Uint8Array]',\n    '[object Uint8ClampedArray]',\n    '[object Int16Array]',\n    '[object Uint16Array]',\n    '[object Int32Array]',\n    '[object Uint32Array]',\n    '[object Float32Array]',\n    '[object Float64Array]',\n    '[object BigInt64Array]',\n    '[object BigUint64Array]'\n  ]\n  const toString = Object.prototype.toString\n\n  return TYPES.indexOf(toString.call(val)) > -1\n}\n\nexport default isTypedArray\n","/**\n * 生成唯一 id 字符串的函数\n * ========================================================================\n * @method guid\n * @param {String} [prefix] - 生成 id 的前缀字符串\n * @return {String} 返回一个表示唯一 id 的字符串\n */\nconst guid = (() => {\n  let id = 0\n\n  return (prefix = 'guid-') => {\n    id += 1\n\n    return `${prefix + id}`\n  }\n})()\n\nexport default guid\n","import _subscribers from './_subscribers'\nimport isFunction from './utils/isFunction'\nimport guid from './utils/guid'\n\n/**\n * 订阅主题，并给出处理器函数\n * ========================================================================\n * @method on\n * @param {String} topic - （必须）主题名称\n * @param {Function} handler - （必须）主题的处理器函数\n * @return {String|Boolean} - 唯一的 token 字符串，例如：'guid-1'。\n */\nconst on = (topic, handler) => {\n  const token = guid()\n  let subject = typeof topic === 'symbol' ? topic.toString() : topic\n\n  if (!isFunction(handler)) {\n    return false\n  }\n\n  /* istanbul ignore else */\n  if (!_subscribers[subject]) {\n    _subscribers[subject] = []\n  }\n\n  _subscribers[subject].push({\n    topic: subject,\n    callback: handler,\n    token\n  })\n\n  return token\n}\n\nexport default on\n","/**\n * 检测测试数据是否为 Function 类型\n * ========================================================================\n * @method isFunction\n * @param {*} val - （必须）待检测的数据\n * @returns {Boolean} 'val' 是 Function 类型返回 true，否则返回 false\n */\nconst isFunction = (val) => {\n  return Object.prototype.toString.apply(val) === '[object Function]'\n}\n\nexport default isFunction\n","import _subscribers from './_subscribers'\nimport hasOwn from './utils/hasOwn'\n\n/**\n * 删除与给定 topic 相同的订阅者信息\n * ========================================================================\n * @method _removeSubscriber\n * @param {String} topic - （必须）订阅主题字符串\n * @returns {Boolean}\n */\nconst _removeSubscriber = (topic) => {\n  if (!hasOwn(_subscribers, topic)) {\n    return false\n  }\n\n  delete _subscribers[topic]\n}\n\nexport default _removeSubscriber\n","import has from './has'\nimport _removeSubscriber from './_removeSubscriber'\nimport _removeSubscriberByToken from './_removeSubscriberByToken'\n\n/**\n * 取消订阅主题\n * ========================================================================\n * @method off\n * @param {String} topic - （必须）订阅的主题\n * @param {Function|String} [token] - （可选）订阅主题的处理器函数或者唯一 Id 值\n */\nconst off = (topic, token) => {\n  if (!has(topic)) {\n    return false\n  }\n\n  if (token) {\n    _removeSubscriberByToken(token)\n  } else {\n    _removeSubscriber(topic)\n  }\n}\n\nexport default off\n","import _subscribers from './_subscribers'\nimport _removeSubscriber from './_removeSubscriber'\n\n/**\n * 通过订阅者 token 值删除订阅者信息\n * ========================================================================\n * @method _removeSubscriberByToken\n * @param {String} token - 订阅者 token 字符串\n * @returns {boolean}\n * @private\n */\nconst _removeSubscriberByToken = (token) => {\n  const keys = Object.keys(_subscribers)\n  let index = -1\n\n  if (!token || keys.length < 1) {\n    return false\n  }\n\n  keys.forEach((subject) => {\n    const subscriber = _subscribers[subject]\n    let topic\n\n    subscriber.forEach((execution, j) => {\n      if (execution.callback === token || execution.token === token) {\n        topic = execution.topic\n        subscriber.splice(index, j)\n      }\n    })\n\n    /* istanbul ignore else */\n    if (subscriber.length < 1) {\n      _removeSubscriber(topic)\n    }\n  })\n}\n\nexport default _removeSubscriberByToken\n","import emit from './emit'\nimport on from './on'\nimport off from './off'\n\nconst subscribers = {\n  on(topic, handler) {\n    return on(topic, handler)\n  },\n\n  emit(topic, data, async = true) {\n    emit(topic, data, async)\n\n    return this\n  },\n\n  off(topic, token) {\n    off(topic, token)\n\n    return this\n  }\n}\n\nexport default subscribers\n","import $observer from '@yaohaixiao/subscribers.js/subscribers.core'\n\nconst $main = document.querySelector('#main')\nconst MIN = 0\nconst MAX = $main.scrollHeight\nlet timer = null\nlet playing = false\n\nconst scrollTo = (top, speed = 100) => {\n  let scrollTop = $main.scrollTop\n  const distance = top - scrollTop\n  const step = Math.ceil(distance / 15)\n  const scroll = () => {\n    if (timer) {\n      clearTimeout(timer)\n    }\n\n    scrollTop += step\n\n    if (\n      (scrollTop <= top && distance < 0) ||\n      (scrollTop >= top && distance > 0)\n    ) {\n      scrollTop = top\n      playing = false\n    }\n\n    $main.scrollTop = scrollTop\n\n    if (!playing) {\n      clearTimeout(timer)\n      timer = null\n      $observer.emit('buttons:toggle', scrollTop)\n      return false\n    } else {\n      timer = setTimeout(scroll, speed)\n    }\n  }\n\n  if (playing) {\n    clearTimeout(timer)\n    timer = null\n    playing = false\n\n    return false\n  }\n\n  playing = true\n\n  scroll()\n}\n\nconst sync = () => {\n  const Observer = new IntersectionObserver(\n    (entries) => {\n      entries.forEach((entry) => {\n        if (entry.intersectionRatio > 0) {\n          $observer.emit('sync:anchor', entry.target.getAttribute('id'))\n        }\n      })\n    },\n    {\n      root: $main,\n      rootMargin: '0px 0px -90% 0px'\n    }\n  )\n\n  $main.querySelectorAll('.section__h3').forEach((section) => {\n    Observer.observe(section)\n  })\n}\n\nconst onScrollToTop = (speed) => {\n  scrollTo(MIN, speed)\n}\nconst onScrollToBottom = (speed) => {\n  scrollTo(MAX, speed)\n}\n\nconst onScrollToMethod = (method) => {\n  const $method = document.querySelector(`#${method}`)\n  scrollTo($method.offsetTop)\n}\n\nconst setup = () => {\n  sync()\n\n  $observer.on('scroll:to:top', onScrollToTop)\n  $observer.on('scroll:to:bottom', onScrollToBottom)\n  $observer.on('scroll:to:method', onScrollToMethod)\n}\n\nexport default {\n  setup\n}\n","/**\r\n * 创建自定义事件（CustomerEvent）\r\n * ========================================================================\r\n * @method createEvent\r\n * @param {String} type - （必须）事件类型（名称）\r\n * @param {Object} [detail] - （可选）传递给自定义事件的数据，默认为 null\r\n * @param {Boolean} [bubbles] - （可选）是否支持冒泡，默认为 true\r\n * @param {Boolean} [cancelable] - （可选）是否可以取消，默认为 true\r\n * @returns {CustomEvent} - CustomerEvent 实例\r\n *\r\n * @example\r\n * <div id=\"nav\" class=\"nav\">\r\n *   <a id=\"service\" class=\"anchor\" href=\"https://www.yaohaixiao.com/serivce\">Service</a>\r\n *   <a id=\"help\" class=\"anchor\" href=\"https://www.yaohaixiao.com/help\">Help</a>\r\n * </div>\r\n *\r\n * const $nav = document.querySelector('#nav')\r\n * const logEvent = createEvent('log', {\r\n *   name: 'Yao',\r\n *   hi() {\r\n *     console.log('hi！！！')\r\n *   }\r\n * })\r\n *\r\n * const logHandler = function(evt) {\r\n *   console.log('detail', evt.detail)\r\n *   console.log('type', evt.type)\r\n * }\r\n *\r\n * $nav.addEventListener('log', logHandler)\r\n *\r\n * $nav.dispatchEvent(logEvent)\r\n */\r\nconst createEvent = (\r\n  type,\r\n  detail = null,\r\n  bubbles = true,\r\n  cancelable = true\r\n) => {\r\n  return new CustomEvent(type, {\r\n    detail: detail,\r\n    bubbles: bubbles,\r\n    cancelable: cancelable\r\n  })\r\n}\r\n\r\nexport default createEvent\r\n","/**\r\n * 判断是否为 String 类型值\r\n * ========================================================================\r\n * @method isString\r\n * @param {*} val - （必须）待检测的字符串\r\n * @returns {Boolean}\r\n */\r\nconst isString = (val) => {\r\n  return typeof val === 'string'\r\n}\r\n\r\nexport default isString\r\n","/**\r\n * 检测是否为 HTMLElement 元素节点\r\n * ========================================================================\r\n * @method isElement\r\n * @param {*|HTMLElement} el - （必须）待检测的数据（DOM 元素）\r\n * @returns {Boolean}\r\n */\r\nconst isElement = (el) => {\r\n  return !!(el && el.nodeName && el.tagName && el.nodeType === 1)\r\n}\r\n\r\nexport default isElement\r\n","import isString from './utils/isString'\r\n\r\n/**\r\n * 获取 DOM 元素（type 事件类型）事件绑定信息\r\n * ========================================================================\r\n * 如果设置了事件类型 type， 则返回指定类型的事件绑定信息，否则返回所有事件绑定信息\r\n * ========================================================================\r\n * @methods getListeners\r\n * @param {HTMLElement} el - （必须）要获取事件绑定信息的 DOM 元素\r\n * @param {String} [type] - （可选）事件类型\r\n * @returns {Array} - 已绑定的事件信息\r\n */\r\nconst getListeners = (el, type) => {\r\n  let listeners = el._listeners || []\r\n\r\n  if (isString(type) && type) {\r\n    listeners = listeners.filter((listener) => {\r\n      return listener.type === type\r\n    })\r\n  }\r\n\r\n  return listeners\r\n}\r\n\r\nexport default getListeners\r\n","export const CAPTURE_EVENTS = [\r\n  'focusout',\r\n  'blur',\r\n  'focusin',\r\n  'focus',\r\n  'load',\r\n  'unload',\r\n  'mouseenter',\r\n  'mouseleave'\r\n]\r\n","import { CAPTURE_EVENTS } from './enum'\r\nimport _delete from './_delete'\r\n\r\n/**\r\n * （私有方法）取消 type 类型的代理事件绑定\r\n * ========================================================================\r\n * 如果没有设置 handler，则销毁 this.$options 绑定的所有符合 type 事件类型的事件绑定\r\n * ========================================================================\r\n * @method _off\r\n * @param {HTMLElement} el - （必须）取消事件绑定的 DOM 元素\r\n * @param {String} type - （必须）事件类型\r\n * @param {Function} fn - （必须）事件处理器回调函数\r\n * @private\r\n */\r\nconst _off = (el, type, fn) => {\r\n  const capture = CAPTURE_EVENTS.indexOf(type) > -1\r\n\r\n  /* istanbul ignore else */\r\n  if (fn._delegateListener) {\r\n    fn = fn._delegateListener\r\n    delete fn._delegateListener\r\n  }\r\n\r\n  // 移除缓存的 _listeners 数据\r\n  _delete(el, type, fn)\r\n\r\n  el.removeEventListener(type, fn, capture)\r\n}\r\n\r\nexport default _off\r\n","/**\r\n * 删除 DOM 元素缓存的 _listeners 数据\r\n * ========================================================================\r\n * @method _delete\r\n * @param {HTMLElement} el - 要删除 listener 的 DOM 元素\r\n * @param {String} type - 事件类型（名称）\r\n * @param {Function} [fn] - 事件处理器回调函数\r\n */\r\nconst _delete = function (el, type, fn) {\r\n  const listeners = el._listeners\r\n  let index = -1\r\n\r\n  if (listeners.length < 1) {\r\n    return false\r\n  }\r\n\r\n  // 移除缓存的 _listeners 数据\r\n  listeners.forEach((listener, i) => {\r\n    const handler = listener.fn\r\n\r\n    if (type === listener.type) {\r\n      index = i\r\n\r\n      if (handler === fn) {\r\n        index = i\r\n      }\r\n    }\r\n  })\r\n\r\n  /* istanbul ignore else */\r\n  if (index > -1) {\r\n    listeners.splice(index, 1)\r\n  }\r\n}\r\n\r\nexport default _delete\r\n","import isString from './utils/isString'\r\nimport isElement from './utils/isElement'\r\nimport getListeners from './getListeners'\r\nimport _off from './_off'\r\n\r\n/**\r\n * 销毁（type 类型的）代理事件绑定\r\n * ========================================================================\r\n * 1. 设置了事件类型 type，则销毁指定类型的事件绑定，否则清除所有代理事件绑定\r\n * 2. recurse 设置为 true，递归销毁子节点全部事件绑定\r\n * ========================================================================\r\n * @method purgeElement\r\n * @param {HTMLElement|String} el - （必须）DOM 元素或者其选择器\r\n * @param {String|Boolean} type - （必须）事件类型\r\n * @param {Boolean} [recurse] - （可选）是否递归销毁子节点所有事件绑定\r\n */\r\nconst purgeElement = function (el, type, recurse = false) {\r\n  const $element = isString(el) ? document.querySelector(el) : el\r\n  const $children = $element.childNodes\r\n  const listeners = getListeners($element, type)\r\n\r\n  listeners.forEach((listener) => {\r\n    _off($element, listener.type, listener.fn)\r\n  })\r\n\r\n  if (\r\n    (recurse || type === true || arguments.length === 1) &&\r\n    $element &&\r\n    $children\r\n  ) {\r\n    $children.forEach(($child) => {\r\n      if (isElement($child)) {\r\n        purgeElement($child, type, recurse)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport default purgeElement\r\n","import _typeof from './_typeof'\r\n\r\n/**\r\n * 检测测试数据是否为 Function 类型\r\n * ========================================================================\r\n * @method isFunction\r\n * @param {*} val - （必须）待检测的数据\r\n * @returns {boolean} 'val' 是 Function 类型返回 true，否则返回 false\r\n */\r\nconst isFunction = (val) => {\r\n  return typeof val === 'function' || _typeof(val) === '[object Function]'\r\n}\r\n\r\nexport default isFunction\r\n","/**\r\n * 返回检测数据调用 toString() 方法后的字符串，用以判断数据类型。\r\n * ========================================================================\r\n * @method _typeof\r\n * @param {*} val - （必须）待检测的数据\r\n * @returns {String}\r\n *\r\n * @example\r\n * _typeof({})\r\n * // => '[object Object]'\r\n *\r\n * _typeof(function(){})\r\n * // => '[object Function]'\r\n *\r\n * _typeof([])\r\n * // => '[object Array]'\r\n *\r\n * _typeof('')\r\n * // => '[object String]'\r\n *\r\n * _typeof(2)\r\n * // => '[object Number]'\r\n */\r\nconst _typeof = (val) => {\r\n  return Object.prototype.toString.apply(val)\r\n}\r\n\r\nexport default _typeof\r\n","import purgeElement from './purgeElement'\r\nimport isFunction from './utils/isFunction'\r\nimport _off from './_off'\r\n\r\n/**\r\n * 取消 type 类型的代理事件绑定\r\n * ========================================================================\r\n * 如果没有设置 handler，则销毁 this.$options 绑定的所有符合 type 事件类型的事件绑定\r\n * ========================================================================\r\n * @method off\r\n * @param {HTMLElement} el - （必须）取消事件绑定的 DOM 元素\r\n * @param {String} type - （必须）事件类型\r\n * @param {Function} [fn] - （可选）事件处理器回调函数\r\n */\r\nconst off = (el, type, fn) => {\r\n  // 如果不设置 fn 参数，默认清除 el 元素上绑定的所有事件处理器\r\n  if (!isFunction(fn)) {\r\n    return purgeElement(el, type)\r\n  }\r\n\r\n  _off(el, type, fn)\r\n}\r\n\r\nexport default off\r\n","import isFunction from './utils/isFunction'\nimport off from './off'\n\nimport { CAPTURE_EVENTS } from './enum'\n\n/**\n * 绑定事件\n * ========================================================================\n * @method at\n * @param {HTMLElement|String|Object} el - （必须）绑定代理事件的 DOM 节点\n * @param {String|Function} type - （必须）事件类型或者事件处理器回调函数\n * @param {Function|Object} fn - （必须） 事件处理器回调函数或者传递给事件处理器回调函数的数据对象\n * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象或者事件处理器回调函数的 this 上下文指向，\n * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向，或者是否仅触发一次\n * 当设置为 true 时，则事件处理器回调函数的 this 上下文指向为 data 对象\n * @param {Boolean} once - （可选）是否仅触发一次\n */\nconst at = (el, type, fn, data, context, once = false) => {\n  // CAPTURE_EVENTS 中的特殊事件，采用事件捕获模型\n  const capture = CAPTURE_EVENTS.indexOf(type) > -1\n  const listener = function (evt) {\n    let overrideContext = context || el\n\n    // 当设置为 true 时，则事件处理器回调函数的\n    // this 上下文指向为 data 对象\n    if (context === true) {\n      overrideContext = data\n    }\n\n    // 仅触发一次\n    /* istanbul ignore else */\n    if (once === true) {\n      off(el, type, listener)\n    }\n\n    fn.call(overrideContext, evt, data)\n  }\n\n  if (!isFunction(fn)) {\n    return false\n  }\n\n  if (!el._listeners) {\n    el._listeners = []\n  }\n\n  // 缓存 options 元素绑定的事件处理器\n  el._listeners.push({\n    el,\n    type,\n    fn: listener,\n    data,\n    context,\n    capture\n  })\n\n  // 缓存包装后的事件处理器\n  fn._delegateListener = listener\n\n  el.addEventListener(type, listener, capture)\n}\n\nexport default at\n","/**\r\n * 获取 options 节点下匹配 selector 选择器的 DOM 节点\r\n * ========================================================================\r\n * Element.matches() 方法可以用来判断 DOM 元素是否与给定的选择器匹配，事件代理判断是\r\n * 否触发绑定的代理事件回调函数，关键就是使用 Element.matches() 辨别当前事件触发的目\r\n * 标 DOM 元素是否为事件代理所期望触发的目标。\r\n * ========================================================================\r\n * @method matches\r\n * @see https://developer.mozilla.org/en-US/docs/web/api/element/matches\r\n * @param {HTMLElement} el - （必须）DOM 元素\r\n * @param {String} selector - （必须）匹配 DOM 元素的选择器\r\n * @returns {Boolean}\r\n */\r\nconst matches = (el, selector = '') => {\r\n  const sel = selector.replace(/^>/i, '')\r\n\r\n  if (!selector || !sel || !el) {\r\n    return false\r\n  }\r\n\r\n  /* istanbul ignore else */\r\n  if (el.matches) {\r\n    return el.matches(sel)\r\n  } else if (el.msMatchesSelector) {\r\n    return el.msMatchesSelector(sel)\r\n  } else {\r\n    return false\r\n  }\r\n}\r\n\r\nexport default matches\r\n","/**\r\n * 获取 DOM 元素的父节点\r\n * ========================================================================\r\n * @method getParentOrHost\r\n * @param {*|HTMLElement} el - （必须）要获取父节点的 DOM 元素\r\n * @returns {*|HTMLElement}\r\n */\r\nconst getParentOrHost = (el) => {\r\n  return el.host && el !== document && el.host.nodeType\r\n    ? el.host\r\n    : el.parentNode\r\n}\r\n\r\nexport default getParentOrHost\r\n","/**\r\n * 在某些情况下，某些浏览器（例如：Safari 浏览器）会返回实际的目标元素内部的文本节点。\r\n * resolveTextNode() 方法则会返回实际的目标节点。\r\n * ========================================================================\r\n * @method resolveTextNode\r\n * @param {HTMLElement|Text} el - 要解析的节点\r\n * @return {*|HTMLElement} - 实际的目标 DOM 节点\r\n */\r\nconst resolveTextNode = function (el) {\r\n  if (el && el.nodeType === 3) {\r\n    return el.parentNode\r\n  }\r\n\r\n  return el\r\n}\r\n\r\nexport default resolveTextNode\r\n","import resolveTextNode from './resolveTextNode'\r\n\r\n/**\r\n * 返回触发事件的 target DOM 元素\r\n * ========================================================================\r\n * @method getTarget\r\n * @param {Event} evt - Event 对象\r\n * @return {HTMLElement} - Event 对象的 target DOM 元素\r\n */\r\nconst getTarget = function (evt) {\r\n  const target = evt.target\r\n\r\n  return resolveTextNode(target)\r\n}\r\n\r\nexport default getTarget\r\n","import closest from './closest'\r\nimport off from './off'\r\nimport getTarget from './getTarget'\r\nimport { CAPTURE_EVENTS } from './enum'\r\n\r\n/**\r\n * 绑定代理事件\r\n * ========================================================================\r\n * @method on\r\n * @param {HTMLElement|String} el - （必须）绑定代理事件的 DOM 节点\r\n * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n * @param {String} type - （必须）事件类型\r\n * @param {Function} fn - （必须） 事件处理器回调函数\r\n * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\r\n * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向，\r\n * 当设置为 true 时，则事件处理器回调函数的 this 上下文指向为 data 对象\r\n * @param {Boolean} once - （可选）是否仅触发一次\r\n */\r\nconst on = (el, selector, type, fn, data, context, once = false) => {\r\n  // CAPTURE_EVENTS 中的特殊事件，采用事件捕获模型\r\n  const capture = CAPTURE_EVENTS.indexOf(type) > -1\r\n\r\n  const listener = function (evt) {\r\n    const target = getTarget(evt)\r\n    // 通过 Element.matches 方法获得点击的目标元素\r\n    const delegateTarget = closest(target, selector, el)\r\n    let overrideContext = context || el\r\n\r\n    evt.delegateTarget = delegateTarget\r\n\r\n    // 当设置为 true 时，则事件处理器回调函数的\r\n    // this 上下文指向为 data 对象\r\n    if (context === true) {\r\n      overrideContext = data\r\n    }\r\n\r\n    /* istanbul ignore else */\r\n    if (delegateTarget) {\r\n      // 仅触发一次\r\n      /* istanbul ignore else */\r\n      if (once === true) {\r\n        off(el, type, listener)\r\n      }\r\n\r\n      fn.call(overrideContext, evt, data)\r\n    }\r\n  }\r\n\r\n  if (!el._listeners) {\r\n    el._listeners = []\r\n  }\r\n\r\n  // 缓存 options 元素绑定的事件处理器\r\n  el._listeners.push({\r\n    el,\r\n    selector,\r\n    type,\r\n    fn: listener,\r\n    data,\r\n    context,\r\n    capture\r\n  })\r\n\r\n  // 缓存包装后的事件处理器\r\n  fn._delegateListener = listener\r\n\r\n  el.addEventListener(type, listener, capture)\r\n}\r\n\r\nexport default on\r\n","import matches from './matches'\r\nimport getParentOrHost from './getParentOrHost'\r\n\r\n/**\r\n * 获取 options 元素父元素最近的包含 selector 选择器的元素\r\n * ========================================================================\r\n * @method closest\r\n * @param {HTMLElement} el - （必须）DOM 元素\r\n * @param {String} selector - （必须）DOM 元素的选择其\r\n * @param {HTMLElement} [ctx] - （必须）比对的 DOM 元素\r\n * @param {Boolean} [includeCTX] - （必须）是否包含 context DOM 元素\r\n * @returns {null|HTMLElement} - 返回最接近的 DOM 元素\r\n */\r\nconst closest = (el, selector, ctx, includeCTX) => {\r\n  const context = ctx || document\r\n\r\n  if (!el) {\r\n    return null\r\n  }\r\n\r\n  do {\r\n    /* istanbul ignore else */\r\n    if (\r\n      (selector != null &&\r\n        (selector[0] === '>'\r\n          ? el.parentNode === context && matches(el, selector)\r\n          : matches(el, selector))) ||\r\n      (includeCTX && el === context)\r\n    ) {\r\n      return el\r\n    }\r\n\r\n    /* istanbul ignore else */\r\n    if (el === context) {\r\n      break\r\n    }\r\n\r\n    /* jshint boss:true */\r\n  } while ((el = getParentOrHost(el)))\r\n}\r\n\r\nexport default closest\r\n","/**\r\n * 检测当前浏览器是否为 IE 浏览器\r\n * ========================================================================\r\n * IE 浏览器返回 true，其它浏览器返回 false\r\n * ========================================================================\r\n * @method isIE\r\n * @returns {Boolean} - IE 浏览器返回 true，其它浏览器返回 false\r\n */\r\nconst isIE = () => {\r\n  const agent = navigator.userAgent\r\n\r\n  return !!agent.match(/Trident/g) || !!agent.match(/MSIE/g)\r\n}\r\n\r\nexport default isIE\r\n","import getListeners from './getListeners'\r\n\r\n/**\r\n * 返回已绑定的事件类型的数组（去除名称重复的事件）\r\n * ========================================================================\r\n * @method getTypes\r\n * @returns {Array}\r\n */\r\nconst getTypes = (el) => {\r\n  const listeners = getListeners(el)\r\n  const types = []\r\n\r\n  listeners.forEach((listener) => {\r\n    types.push(listener.type)\r\n  })\r\n\r\n  return [...new Set(types)]\r\n}\r\n\r\nexport default getTypes\r\n","/**\r\n * 获取 scrollTop 和 scrollLeft 数组数据\r\n * ========================================================================\r\n * IE 浏览器种计算 pageX 和 pageY，需要包含 scrollTop 和 scrollLeft 的值\r\n * ========================================================================\r\n * @method getScroll\r\n * @return {Array} - 返回滚动信息的数组 [scrollTop, scrollLeft]\r\n */\r\nconst getScroll = function () {\r\n  const $body = document.documentElement || document.body\r\n  let scrollXY = [0, 0]\r\n\r\n  if ($body && ($body.scrollTop || $body.scrollLeft)) {\r\n    scrollXY = [$body.scrollTop, $body.scrollLeft]\r\n  }\r\n\r\n  return scrollXY\r\n}\r\n\r\nexport default getScroll\r\n","import getScrollLeft from './getScrollLeft'\r\nimport isIE from './utils/isIE'\r\n\r\n/**\r\n * 获取事件触发时的 pageX 值\r\n * ========================================================================\r\n * @method getPageX\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/MouseEvent/pageX\r\n * @param {Event} evt - （必须）Event 对象\r\n * @return {Number} - 返回事件触发时的 pageX 值\r\n */\r\nconst getPageX = function (evt) {\r\n  let x = evt.pageX\r\n\r\n  /* istanbul ignore else */\r\n  if (!x && 0 !== x) {\r\n    x = evt.clientX || 0\r\n\r\n    if (isIE()) {\r\n      x += getScrollLeft()\r\n    }\r\n  }\r\n\r\n  return x\r\n}\r\n\r\nexport default getPageX\r\n","import getScroll from './getScroll'\r\n\r\n/**\r\n * 获取 scrollTop 值\r\n * ========================================================================\r\n * @method getScrollLeft\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollLeft\r\n * @return {Number} - 返回 scrollLeft 值\r\n */\r\nconst getScrollLeft = function () {\r\n  return getScroll()[1]\r\n}\r\n\r\nexport default getScrollLeft\r\n","import getScrollTop from './getScrollTop'\r\nimport isIE from './utils/isIE'\r\n\r\n/**\r\n * 获取事件触发时的 pageY 值\r\n * ========================================================================\r\n * @method getPageY\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/MouseEvent/pageY\r\n * @param {Event} evt - （必须）Event 对象\r\n * @return {Number} - 返回事件触发时的 pageY 值\r\n */\r\nconst getPageY = function (evt) {\r\n  let y = evt.pageY\r\n\r\n  /* istanbul ignore else */\r\n  if (!y && 0 !== y) {\r\n    y = evt.clientY || 0\r\n\r\n    if (isIE()) {\r\n      y += getScrollTop()\r\n    }\r\n  }\r\n\r\n  return y\r\n}\r\n\r\nexport default getPageY\r\n","import getScroll from './getScroll'\r\n\r\n/**\r\n * 获取 scrollTop 值\r\n * ========================================================================\r\n * @method getScrollTop\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/scrollTop\r\n * @return {Number} - 返回 getScrollTop 值\r\n */\r\nconst getScrollTop = function () {\r\n  return getScroll()[0]\r\n}\r\n\r\nexport default getScrollTop\r\n","import isAppleSafari from './utils/isAppleSafari'\r\n\r\n/**\r\n * 返回触发事件的 charCode\r\n * ========================================================================\r\n * @method getCharCode\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/KeyboardEvent/keyCode\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/KeyboardEvent/charCode\r\n * @param {Event} evt - Event 对象\r\n * @return {Number} - 返回事件的 charCode\r\n */\r\nconst getCharCode = function (evt) {\r\n  let code = evt.keyCode || evt.charCode\r\n  // keycodes for webkit/safari\r\n  const webkitKeymap = {\r\n    63232: 38, // up\r\n    63233: 40, // down\r\n    63234: 37, // left\r\n    63235: 39, // right\r\n    63276: 33, // page up\r\n    63277: 34, // page down\r\n    25: 9 // The SHIFT-TAB (Safari provides a different key code in\r\n    // this case, even though the shiftKey modifier is set)\r\n  }\r\n\r\n  // webkit key normalization\r\n  if (isAppleSafari() && code in webkitKeymap) {\r\n    code = webkitKeymap[code]\r\n  }\r\n\r\n  return code\r\n}\r\n\r\nexport default getCharCode\r\n","/**\r\n * 判断是否为 Apple 设备的 Safari 浏览器\r\n * ========================================================================\r\n * @method isAppleSafari\r\n * @returns {Boolean}\r\n */\r\nconst isAppleSafari = () => {\r\n  const UA = navigator.userAgent\r\n  const platforms = /Mac|iPhone|iPod|iPad/i\r\n  const rejected = /Chrome|Android|CriOS|FxiOS|EdgiOS/i\r\n  const expected = /Safari/i\r\n\r\n  if (rejected.test(UA)) {\r\n    return false\r\n  }\r\n\r\n  return platforms.test(UA) && expected.test(UA)\r\n}\r\n\r\nexport default isAppleSafari\r\n","/**\r\n * 阻止触发绑定事件 DOM 元素的默认行为\r\n * ========================================================================\r\n * @method preventDefault\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Event/preventDefault\r\n * @param {Event} evt - 事件对象\r\n *\r\n * @example\r\n * <div id=\"nav\" class=\"nav\">\r\n *   <a id=\"service\" class=\"anchor\" href=\"https://www.yaohaixiao.com/serivce\">Service</a>\r\n *   <a id=\"help\" class=\"anchor\" href=\"https://www.yaohaixiao.com/help\">Help</a>\r\n * </div>\r\n *\r\n * const $nav = document.querySelector('#nav')\r\n * const $service = document.querySelector('.anchor')\r\n *\r\n * on($nav, 'click', function(evt) {\r\n *   console.log('你点击了导航栏')\r\n * })\r\n *\r\n * on($anchor, 'click', function(evt) {\r\n *   console.log('tagName', this.tagName)\r\n *\r\n *   // 在工作台输出：'a'\r\n *   // 会触发事件冒泡，输出：'你点击了导航栏'\r\n *   // 但不会切换到 href 属性的页面地址，阻止了点击链接的默认行为\r\n *   stopEvent(evt)\r\n * })\r\n */\r\nconst preventDefault = function (evt) {\r\n  evt.preventDefault()\r\n}\r\n\r\nexport default preventDefault\r\n","/**\r\n * 终止事件在传播过程的捕获或冒泡的事件流\r\n * ========================================================================\r\n * @method stopPropagation\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Event/stopPropagation\r\n * @param {Event} evt - 事件对象\r\n *\r\n * @example\r\n * <div id=\"nav\" class=\"nav\">\r\n *   <a id=\"service\" class=\"anchor\" href=\"https://www.yaohaixiao.com/serivce\">Service</a>\r\n *   <a id=\"help\" class=\"anchor\" href=\"https://www.yaohaixiao.com/help\">Help</a>\r\n * </div>\r\n *\r\n * const $nav = document.querySelector('#nav')\r\n * const $service = document.querySelector('.anchor')\r\n *\r\n * on($nav, 'click', function(evt) {\r\n *   console.log('你点击了导航栏')\r\n * })\r\n *\r\n * on($anchor, 'click', function(evt) {\r\n *   console.log('tagName', this.tagName)\r\n *\r\n *   // 工作台输出：'a'\r\n *   // 然后跳转到 href 的地址\r\n *   // 但不会触发事件冒泡，输出：'你点击了导航栏'\r\n *   stopPropagation(evt)\r\n * })\r\n */\r\nconst stopPropagation = function (evt) {\r\n  evt.stopPropagation()\r\n}\r\n\r\nexport default stopPropagation\r\n","import stopPropagation from './stopPropagation'\r\nimport preventDefault from './preventDefault'\r\n\r\n/**\r\n * 停止事件（阻止默认行为和阻止事件的捕获或冒泡）\r\n * ========================================================================\r\n * @method stopEvent\r\n * @param {Event} evt - 事件对象\r\n *\r\n * @example\r\n * <div id=\"nav\" class=\"nav\">\r\n *   <a id=\"service\" class=\"anchor\" href=\"https://www.yaohaixiao.com/serivce\">Service</a>\r\n *   <a id=\"help\" class=\"anchor\" href=\"https://www.yaohaixiao.com/help\">Help</a>\r\n * </div>\r\n *\r\n * const $nav = document.querySelector('#nav')\r\n * const $service = document.querySelector('.anchor')\r\n *\r\n * on($nav, 'click', function(evt) {\r\n *   console.log('你点击了导航栏')\r\n * })\r\n *\r\n * on($anchor, 'click', function(evt) {\r\n *   console.log('tagName', this.tagName)\r\n *\r\n *   // 工作台输出：'a'\r\n *   // 不会触发事件冒泡，输出：'你点击了导航栏'\r\n *   // 也不会切换到 href 属性的页面，阻止了点击链接的默认行为\r\n *   stopEvent(evt)\r\n * })\r\n */\r\nconst stopEvent = function (evt) {\r\n  stopPropagation(evt)\r\n  preventDefault(evt)\r\n}\r\n\r\nexport default stopEvent\r\n","import createEvent from './createEvent'\nimport off from './off'\nimport at from './at'\nimport on from './on'\nimport only from './only'\nimport once from './once'\nimport focusin from './focusin'\nimport focusout from './focusout'\nimport isElement from './utils/isElement'\nimport isString from './utils/isString'\nimport getListeners from './getListeners'\nimport getTypes from './getTypes'\nimport hasEvent from './hasEvent'\nimport getPageX from './getPageX'\nimport getPageY from './getPageY'\nimport getPageXY from './getPageXY'\nimport getCharCode from './getCharCode'\nimport getRelatedTarget from './getRelatedTarget'\nimport getTarget from './getTarget'\nimport purgeElement from './purgeElement'\nimport destroy from './destroy'\nimport preventDefault from './preventDefault'\nimport stopPropagation from './stopPropagation'\nimport stopEvent from './stopEvent'\nimport stopImmediate from './stopImmediate'\nimport trigger from './trigger'\n\n/**\n * Emitter 类 - JavaScript 事件代理对象\n * ========================================================================\n */\nclass Emitter {\n  /**\n   * Emitter 构造函数\n   * ========================================================================\n   * @constructor\n   * @param {HTMLElement|String} el - （必须）DOM 元素或其选择器\n   * @returns {Emitter} - Emitter 对象\n   */\n  constructor(el) {\n    if (isElement(el)) {\n      this.$el = el\n    } else {\n      if (isString(el)) {\n        this.$el = document.querySelector(el)\n      }\n    }\n  }\n\n  /**\n   * 获取 DOM 元素（type 事件类型）事件绑定信息\n   * ========================================================================\n   * 如果设置了事件类型 type， 则返回指定类型的事件绑定信息，否则返回所有事件绑定信息\n   * ========================================================================\n   * @method getListeners\n   * @param {String} [type] - （可选）事件类型\n   * @returns {Array} - 已绑定的事件信息\n   */\n  getListeners(type) {\n    return getListeners(this.$el, type)\n  }\n\n  /**\n   * 返回已绑定的事件类型的数组（去除名称重复的事件）\n   * ========================================================================\n   * @method getTypes\n   * @since 1.5.0\n   * @returns {Array}\n   */\n  getTypes() {\n    return getTypes(this.$el)\n  }\n\n  /**\n   * 判断是否已经（指定类型的）绑定事件\n   * ========================================================================\n   * @method hasEvent\n   * @since 1.4.0\n   * @param {String} [type] - （可选）事件名称：\n   *                           指定 type，则判断是否绑定 type 类型事件；\n   *                           未指定 type，则判断是否绑定任意类型的事件；\n   * @returns {Boolean}\n   */\n  hasEvent(type) {\n    return hasEvent(this.$el, type)\n  }\n\n  /**\n   * 获取事件触发时的 pageX 值\n   * ========================================================================\n   * @method getPageX\n   * @see getPageX\n   * @param {Event} evt - （必须）Event 对象\n   * @return {Number} - 返回事件触发时的 pageX 值\n   */\n  getPageX(evt) {\n    return getPageX(evt)\n  }\n\n  /**\n   * 获取事件触发时的 pageY 值\n   * ========================================================================\n   * @method getPageY\n   * @see getPageY\n   * @param {Event} evt - （必须）Event 对象\n   * @return {Number} - 返回事件触发时的 pageY 值\n   */\n  getPageY(evt) {\n    return getPageY(evt)\n  }\n\n  /**\n   * 获取事件触发时的 pageX 和 pageY 数组数据\n   * ========================================================================\n   * @method getPageXY\n   * @see getPageXY\n   * @param {Event} evt - （必须）Event 对象\n   * @return {Array} - 返回事件触发时的数组数据：[pageX, pageY]\n   */\n  getPageXY(evt) {\n    return getPageXY(evt)\n  }\n\n  /**\n   * 返回触发事件的 charCode\n   * ========================================================================\n   * @method getCharCode\n   * @see getCharCode\n   * @param {Event} evt - （必须）Event 对象\n   * @return {Number} - 返回事件的 charCode\n   */\n  getCharCode(evt) {\n    return getCharCode(evt)\n  }\n\n  /**\n   * 返回触发（鼠标）事件的 relatedTarget DOM 元素。\n   * ========================================================================\n   * MouseEvent.relatedTarget 只读属性是鼠标事件的次要目标（如果有）。相关的鼠标事件：\n   * mouseenter\n   * mouseleave\n   * mouseover\n   * mouseout\n   * dragenter\n   * dragleave\n   * ========================================================================\n   * @method getRelatedTarget\n   * @since 1.1.0\n   * @see https://developer.mozilla.org/en-US/docs/web/api/mouseevent/relatedtarget\n   * @param {Event} evt - Event 对象\n   * @return {HTMLElement} - Event 对象的 relatedTarget DOM 元素\n   */\n  getRelatedTarget(evt) {\n    return getRelatedTarget(evt)\n  }\n\n  /**\n   * 返回触发事件的 target DOM 元素\n   * ========================================================================\n   * @method getTarget\n   * @since 1.1.0\n   * @param {Event} evt - Event 对象\n   * @return {HTMLElement} - Event 对象的 target DOM 元素\n   */\n  getTarget(evt) {\n    return getTarget(evt)\n  }\n\n  /**\n   * 销毁（type 类型的）代理事件绑定\n   * ========================================================================\n   * 1. 设置了事件类型 type，则销毁指定类型的事件绑定，否则清除所有代理事件绑定\n   * 2. recurse 设置为 true，递归销毁子节点全部事件绑定\n   * ========================================================================\n   * @method purge\n   * @param {String} type  - （必须）事件类型\n   * @param {Boolean} [recurse]  - （可选）是否递归销毁子节点所有事件绑定\n   * 元素绑定的全部事件处理器\n   * @returns {Emitter} - Emitter 对象\n   */\n  purge(type, recurse = false) {\n    purgeElement(this.$el, type, recurse)\n\n    return this\n  }\n\n  /**\n   * 销毁所有已绑定的代理事件\n   * ========================================================================\n   * @method destroy\n   * @returns {Emitter} - Emitter 对象\n   */\n  destroy() {\n    destroy(this.$el)\n\n    return this\n  }\n\n  /**\n   * 创建自定义事件（CustomerEvent）\n   * ========================================================================\n   * @method createEvent\n   * @since 1.8.0\n   * @see createEvent\n   * @param {String} type - （必须）事件类型（名称）\n   * @param {Object} [detail] - （可选）传递给自定义事件的数据，默认为 null\n   * @param {Boolean} [bubbles] - （可选）是否支持冒泡，默认为 true\n   * @param {Boolean} [cancelable] - （可选）是否可以取消，默认为 true\n   * @returns {CustomEvent} - CustomerEvent 实例\n   */\n  createEvent(type, detail = null, bubbles = true, cancelable = true) {\n    return createEvent(type, detail, bubbles, cancelable)\n  }\n\n  /**\n   * 取消 type 类型的代理事件绑定\n   * ========================================================================\n   * 如果没有设置 handler，则销毁 this.$options 绑定的所有符合 type 事件类型的事件绑定\n   * ========================================================================\n   * @method off\n   * @param {String} type - （必须）事件类型\n   * @param {Function} [handler] - （可选）事件处理器回调函数\n   * @returns {Emitter} - Emitter 对象\n   */\n  off(type, handler) {\n    off(this.$el, type, handler)\n\n    return this\n  }\n\n  /**\n   * 绑定事件\n   * ========================================================================\n   * @method at\n   * @param {String|Function} type - （必须）事件类型或者事件处理器回调函数\n   * @param {Function|Object} fn - （必须） 事件处理器回调函数或者传递给事件处理器回调函数的数据对象\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象或者事件处理器回调函数的 this 上下文指向，\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向，或者是否仅触发一次\n   * 当设置为 true 时，则事件处理器回调函数的 this 上下文指向为 data 对象\n   * @param {Boolean} once - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  at(type, fn, data, context, once = false) {\n    at(this.$el, type, fn, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定代理事件\n   * ========================================================================\n   * @method on\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {String} type - （必须）事件类型\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向：\n   * 当设置为 true 时，则事件处理器回调函数的 this 上下文指向为 data 对象；\n   * 如未指定 context，则事件处理器回调函数的 this 上下文指向为 Emitter 对象；\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  on(selector, type, handler, data, context, once = false) {\n    on(this.$el, selector, type, handler, data, context || this, once)\n\n    return this\n  }\n\n  /**\n   * 绑定仅触发一次的事件\n   * ========================================================================\n   * @method only\n   * @param {String} type - （必须）事件类型\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @returns {Emitter} - Emitter 对象\n   */\n  only(type, handler, data, context) {\n    only(this.$el, type, handler, data, context)\n\n    return this\n  }\n\n  /**\n   * 绑定仅触发一次的代理事件\n   * ========================================================================\n   * @method once\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {String} type - （必须）事件类型\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @returns {Emitter} - Emitter 对象\n   */\n  once(selector, type, handler, data, context) {\n    once(this.$el, selector, type, handler, data, context)\n\n    return this\n  }\n\n  /**\n   * 绑定 click 代理事件\n   * ========================================================================\n   * @method click\n   * @since 1.4.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/click_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  click(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'click', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 dbclick 代理事件\n   * ========================================================================\n   * @method dbclick\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/dblclick_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  dbclick(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'dbclick', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 mouseenter 代理事件\n   * ========================================================================\n   * @method mouseenter\n   * @since 1.4.0\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  mouseenter(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'mouseenter', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 mouseleave 代理事件\n   * ========================================================================\n   * @method mouseleave\n   * @since 1.4.0\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  mouseleave(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'mouseleave', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 mousedown 代理事件\n   * ========================================================================\n   * @method mousedown\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  mousedown(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'mousedown', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 mouseup 代理事件\n   * ========================================================================\n   * @method mouseup\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  mouseup(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'mouseup', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 mouseover 代理事件\n   * ========================================================================\n   * @method mouseover\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  mouseover(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'mouseover', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 mousemove 代理事件\n   * ========================================================================\n   * @method mousemove\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  mousemove(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'mousemove', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 mouseout 代理事件\n   * ========================================================================\n   * @method mouseout\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  mouseout(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'mouseout', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 drag 代理事件\n   * ========================================================================\n   * @method drag\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/drag_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  drag(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'drag', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 dragend 代理事件\n   * ========================================================================\n   * @method dragend\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/dragend_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  dragend(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'dragend', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 dragenter 代理事件\n   * ========================================================================\n   * @method dragenter\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/dragenter_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  dragenter(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'dragenter', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 dragleave 代理事件\n   * ========================================================================\n   * @method dragleave\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/dragleave_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  dragleave(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'dragleave', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 dragover 代理事件\n   * ========================================================================\n   * @method dragover\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/dragover_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  dragover(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'dragover', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 dragstart 代理事件\n   * ========================================================================\n   * @method dragstart\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/dragstart_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  dragstart(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'dragstart', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 drop 代理事件\n   * ========================================================================\n   * @method drop\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/drop_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  drop(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'drop', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 wheel 代理事件\n   * ========================================================================\n   * @method wheel\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  wheel(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'wheel', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 contextmenu 代理事件\n   * ========================================================================\n   * @method contextmenu\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/contextmenu_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  contextmenu(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'contextmenu', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 focusin 或者 focus 代理事件\n   * ========================================================================\n   * @method focusin\n   * @since 1.4.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/focus_event\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  focusin(selector, handler, data, context, once = false) {\n    focusin(this.$el, selector, handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 focusout 或者 blur 代理事件\n   * ========================================================================\n   * @method focusout\n   * @since 1.4.0\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  focusout(selector, handler, data, context, once = false) {\n    focusout(this.$el, selector, handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 change 代理事件\n   * ========================================================================\n   * @method change\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/change_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  change(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'change', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 input 代理事件\n   * ========================================================================\n   * @method input\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/input_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  input(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'input', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 compositionstart 代理事件\n   * ========================================================================\n   * @method compositionstart\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/compositionstart_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  compositionstart(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'compositionstart', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 compositionupdate 代理事件\n   * ========================================================================\n   * @method compositionupdate\n   * @since 1.7.0\n   * @see  https://developer.mozilla.org/zh-CN/docs/Web/API/Element/compositionupdate_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  compositionupdate(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'compositionupdate', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 compositionend 代理事件\n   * ========================================================================\n   * @method compositionend\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/compositionend_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  compositionend(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'compositionend', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 paste 代理事件\n   * ========================================================================\n   * @method paste\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/paste_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  paste(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'paste', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 copy 代理事件\n   * ========================================================================\n   * @method copy\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/copy_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  copy(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'copy', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 cut 代理事件\n   * ========================================================================\n   * @method cut\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/cut_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  cut(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'cut', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 keydown 代理事件\n   * ========================================================================\n   * @method keydown\n   * @since 1.7.0\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  keydown(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'keydown', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 keyup 代理事件\n   * ========================================================================\n   * @method keyup\n   * @since 1.7.0\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  keyup(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'keyup', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 绑定 error 代理事件\n   * ========================================================================\n   * @method error\n   * @since 1.7.0\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/error_event\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\n   * @param {Function} handler - （必须） 事件处理器回调函数\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\n   * @param {Boolean} [once] - （可选）是否仅触发一次\n   * @returns {Emitter} - Emitter 对象\n   */\n  error(selector, handler, data, context, once = false) {\n    on(this.$el, selector, 'error', handler, data, context, once)\n\n    return this\n  }\n\n  /**\n   * 触发代理自定义事件\n   * ========================================================================\n   * @method trigger\n   * @since 1.6.0\n   * @param {String} type - （必须）事件类型\n   * @param {String} selector - （必须）选择器\n   * @returns {Emitter} - Emitter 对象\n   */\n  trigger(type, selector) {\n    trigger(this.$el, type, selector)\n\n    return this\n  }\n\n  /**\n   * 阻止事件的默认行为\n   * ========================================================================\n   * @method preventDefault\n   * @see preventDefault\n   * @param {Event} evt - （必须）Event 对象\n   * @returns {Emitter}  - Emitter 对象\n   */\n  preventDefault(evt) {\n    preventDefault(evt)\n\n    return this\n  }\n\n  /**\n   * 终止事件在传播过程的捕获或冒泡的事件流\n   * ========================================================================\n   * @method stopPropagation\n   * @see stopPropagation\n   * @param {Event} evt - （必须）Event 对象\n   * @returns {Emitter}  - Emitter 对象\n   */\n  stopPropagation(evt) {\n    stopPropagation(evt)\n\n    return this\n  }\n\n  /**\n   * 停止事件（阻止默认行为和阻止事件的捕获或冒泡）\n   * ========================================================================\n   * @method stopEvent\n   * @see stopEvent\n   * @param {Event} evt - （必须）Event 对象\n   * @returns {Emitter}  - Emitter 对象\n   */\n  stopEvent(evt) {\n    stopEvent(evt)\n\n    return this\n  }\n\n  /**\n   * 阻止监听同一事件的其他事件监听器被调用，并且阻止默认行为和事件冒泡。\n   * ========================================================================\n   * @method stopImmediate\n   * @since 1.8.0\n   * @see stopImmediate\n   * @param {Event} evt - （必须）Event 对象\n   */\n  stopImmediate(evt) {\n    stopImmediate(evt)\n\n    return this\n  }\n}\n\nexport default Emitter\n","import isString from './utils/isString'\r\nimport getTypes from './getTypes'\r\n\r\n/**\r\n * 判断是否已经（指定类型的）绑定事件\r\n * ========================================================================\r\n * @method hasEvent\r\n * @param {HTMLElement} el - 要检测是否绑定事件的 DOM 元素\r\n * @param {String} [type] - （可选）事件名称：\r\n *                           指定 type，则判断是否绑定 type 类型事件；\r\n *                           未指定 type，则判断是否绑定任意类型的事件；\r\n * @returns {Boolean}\r\n */\r\nconst hasEvent = (el, type) => {\r\n  const types = getTypes(el)\r\n  let result\r\n\r\n  if (types.length < 1) {\r\n    return false\r\n  }\r\n\r\n  result = types.length > 0\r\n\r\n  /* istanbul ignore else */\r\n  if (type && isString(type)) {\r\n    result = types.indexOf(type) > -1\r\n  }\r\n\r\n  return result\r\n}\r\n\r\nexport default hasEvent\r\n","import getPageX from './getPageX'\r\nimport getPageY from './getPageY'\r\n\r\n/**\r\n * 获取事件触发时的 pageX 和 pageY 数组数据\r\n * ========================================================================\r\n * @method getPageXY\r\n * @param {Event} evt - （必须）Event 对象\r\n * @return {Array} - 返回事件触发时的数组数据：[pageX, pageY]\r\n */\r\nconst getPageXY = function (evt) {\r\n  return [getPageX(evt), getPageY(evt)]\r\n}\r\n\r\nexport default getPageXY\r\n","import resolveTextNode from './resolveTextNode'\r\n\r\n/**\r\n * 返回触发（鼠标）事件的 relatedTarget DOM 元素。\r\n * ========================================================================\r\n * MouseEvent.relatedTarget 只读属性是鼠标事件的次要目标（如果有）。相关的鼠标事件：\r\n * mouseenter\r\n * mouseleave\r\n * mouseover\r\n * mouseout\r\n * dragenter\r\n * dragleave\r\n * ========================================================================\r\n * @method getRelatedTarget\r\n * @see https://developer.mozilla.org/en-US/docs/web/api/mouseevent/relatedtarget\r\n * @param {Event} evt - Event 对象\r\n * @return {HTMLElement} - Event 对象的 relatedTarget DOM 元素\r\n */\r\nconst getRelatedTarget = function (evt) {\r\n  let target = evt.relatedTarget\r\n  const type = evt.type\r\n\r\n  if (!target) {\r\n    if (type === 'mouseout') {\r\n      target = evt.toElement\r\n    } else if (type === 'mouseover') {\r\n      target = evt.fromElement\r\n    }\r\n  }\r\n\r\n  return resolveTextNode(target)\r\n}\r\n\r\nexport default getRelatedTarget\r\n","import getTypes from './getTypes'\r\nimport purgeElement from './purgeElement'\r\n\r\n/**\r\n * 销毁所有已绑定的代理事件\r\n * ========================================================================\r\n * @method destroy\r\n * @param {HTMLElement} el - 需要解除所有事件绑定的 DOM 元素\r\n * @returns {Emitter} - Emitter 对象\r\n */\r\nconst destroy = (el) => {\r\n  const types = getTypes(el)\r\n\r\n  types.forEach((type) => {\r\n    purgeElement(el, type, true)\r\n  })\r\n}\r\n\r\nexport default destroy\r\n","import at from './at'\n\n/**\n * 绑定只触发一次的事件\n * ========================================================================\n * @method once\n * @param {HTMLElement} el - （必须）绑定代理事件的 DOM 节点\n * @param {String} type - （必须）事件类型\n * @param {Function} fn - （必须） 事件处理器回调函数\n * @param {Object} data - （可选）传递给事件处理器回调函数的数据对象\n * @param {Object|Boolean} context - （可选）事件处理器回调函数的 this 上下文指向，\n * 当设置为 true 时，则事件处理器回调函数的 this 上下文指向为 data 对象\n */\nconst only = (el,  type, fn, data, context) => {\n  at(el, type, fn, data, context, true)\n}\n\nexport default only\n","import on from './on'\r\n\r\n/**\r\n * 绑定只触发一次的事件\r\n * ========================================================================\r\n * @method once\r\n * @param {HTMLElement} el - （必须）绑定代理事件的 DOM 节点\r\n * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n * @param {String} type - （必须）事件类型\r\n * @param {Function} fn - （必须） 事件处理器回调函数\r\n * @param {Object} data - （可选）传递给事件处理器回调函数的数据对象\r\n * @param {Object|Boolean} context - （可选）事件处理器回调函数的 this 上下文指向，\r\n * 当设置为 true 时，则事件处理器回调函数的 this 上下文指向为 data 对象\r\n */\r\nconst once = (el, selector, type, fn, data, context) => {\r\n  on(el, selector, type, fn, data, context, true)\r\n}\r\n\r\nexport default once\r\n","import isIE from './utils/isIE'\r\nimport on from './on'\r\n\r\n/**\r\n * 绑定 focusin 或者 focus 代理事件\r\n * ========================================================================\r\n * @method focusin\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/focus_event\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event\r\n * @param {HTMLElement} el - （必须）绑定代理事件的 DOM 节点\r\n * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n * @param {Function} fn - （必须） 事件处理器回调函数\r\n * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\r\n * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向，\r\n * 当设置为 true 时，则事件处理器回调函数的 this 上下文指向为 data 对象\r\n * @param {Boolean} [once] - （可选）是否仅触发一次\r\n */\r\nconst focusin = function (el, selector, fn, data, context, once = false) {\r\n  const FOCUSIN = isIE() ? 'focusin' : 'focus'\r\n\r\n  return on(el, selector, FOCUSIN, fn, data, context, once)\r\n}\r\n\r\nexport default focusin\r\n","import isIE from './utils/isIE'\r\nimport on from './on'\r\n\r\n/**\r\n * 绑定 focusout 或者 blur 代理事件\r\n * ========================================================================\r\n * @method focusout\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event\r\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event\r\n * @param {HTMLElement} el - （必须）绑定代理事件的 DOM 节点\r\n * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n * @param {Function} fn - （必须） 事件处理器回调函数\r\n * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\r\n * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向，\r\n * 当设置为 true 时，则事件处理器回调函数的 this 上下文指向为 data 对象\r\n * @param {Boolean} [once] - （可选）是否仅触发一次\r\n */\r\nconst focusout = function (el, selector, fn, data, context, once = false) {\r\n  const FOCUSOUT = isIE() ? 'focusout' : 'blur'\r\n\r\n  on(el, selector, FOCUSOUT, fn, data, context, once)\r\n}\r\n\r\nexport default focusout\r\n","import createEvent from './createEvent'\n\n/**\n * 触发代理自定义事件\n * ========================================================================\n * trigger() 方法也可以用来手动触发内置的事件，例如 click, mouseenter 等事件，通常\n * 使用 trigger() 来手动触发用户自定义事件。\n *\n * 另外，选择器 selector 的匹配使用 document.querySelector() 方法，因此仅事件触发一次。\n * ========================================================================\n * @method trigger\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/CustomEvent\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/dispatchEvent\n * @param {HTMLElement} el - （必须）绑定代理事件的 DOM 元素\n * @param {String} type - （必须）事件类型\n * @param {String} [selector] - （可选）选择器，没有选择器，则直接触发 el 元素上的自定义事件\n *\n * @example\n * const $list = document.querySelector('#list')\n *\n * // 绑定 alert 自定义事件\n * on($list, '.item', 'alert', itemHandler)\n * on($list, '.remove', 'alert', removeHandler)\n *\n * // 触发 $list 下匹配 '.item' 元素手动触发 alert 自定义事件\n * trigger($list, 'alert', '.item')\n *\n * // 可以使用伪类选择器，更精确的匹配元素\n * trigger($list, 'alert', '.item:last-child')\n *\n * // 触发 $list 下匹配 '.remove' 元素手动触发 alert 自定义事件\n * trigger($list, 'alert', '.remove')\n * trigger($list, 'alert', '.remove:nth-child(2)')\n *\n * // 没有选择器，则直接触发 el 元素上的自定义事件\n * trigger($list, 'alert')\n */\nconst trigger = (el, type, selector) => {\n  let $element\n\n  if (!type) {\n    return false\n  }\n\n  if (selector) {\n    $element = el.querySelector(selector)\n  } else {\n    $element = el\n  }\n\n  if (!$element) {\n    return false\n  }\n\n  $element.dispatchEvent(createEvent(type))\n}\n\nexport default trigger\n","import stopEvent from './stopEvent'\r\n\r\n/**\r\n * 阻止监听同一事件的其他事件监听器被调用，并且阻止默认行为和事件冒泡。\r\n * ========================================================================\r\n * @method stopImmediate\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Event/stopImmediatePropagation\r\n * @param {Event} evt - （必须）Event 对象\r\n *\r\n * @example\r\n * <div id=\"nav\" class=\"nav\">\r\n *   <a id=\"service\" class=\"anchor\" href=\"https://www.yaohaixiao.com/serivce\">Service</a>\r\n *   <a id=\"help\" class=\"anchor\" href=\"https://www.yaohaixiao.com/help\">Help</a>\r\n * </div>\r\n *\r\n * const $nav = document.querySelector('#nav')\r\n * const $service = document.querySelector('#service')\r\n * const logHandler = function(evt) {\r\n *   console.log(evt.target)\r\n * }\r\n * const styleHandler = function(evt) {\r\n *   $nav.classList.add('checked')\r\n * }\r\n * const serviceHandler = function(evt) {\r\n *   alert(evt.target)\r\n *   stopImmediate(evt)\r\n * }\r\n * const removeHandler = function(evt) {\r\n *   const $target = evt.target\r\n *\r\n *   $target.parentNode.removeChild($target)\r\n * }\r\n *\r\n * $nav.addEventListener('click', logHandler)\r\n * $nav.addEventListener('click', styleHandler)\r\n * $service.addEventListener('click', serviceHandler)\r\n * $service.addEventListener('click', removeHandler)\r\n *\r\n * $nav.click()\r\n * // => 触发 logHandler 和 styleHandler\r\n *\r\n * $service.click()\r\n * // => 仅触发 serviceHandler，不会触发 removeHandler\r\n * // => 并且不会跳转页面，也不会冒泡到 $nav，不会触发 logHandler 和 styleHandler\r\n */\r\nconst stopImmediate = function (evt) {\r\n  stopEvent(evt)\r\n  evt.stopImmediatePropagation()\r\n}\r\n\r\nexport default stopImmediate\r\n","import Emitter from './emitter'\r\n\r\nconst delegate = (el) => {\r\n  return new Emitter(el)\r\n}\r\n\r\nexport default delegate\r\n","import delegate from '../../delegate'\r\nimport $observer from '@yaohaixiao/subscribers.js/subscribers.core'\r\n\r\nconst $aside = document.querySelector('#aside')\r\nlet $active = null\r\n\r\nconst onAnchorTrigger = function (evt) {\r\n  const $target = evt.delegateTarget\r\n  const id = $target.href.split('#')[1]\r\n\r\n  $observer.emit('scroll:to:method', id)\r\n\r\n  evt.stopPropagation()\r\n  evt.preventDefault()\r\n}\r\n\r\nconst onAsyncAnchor = (id) => {\r\n  const $anchor = document.querySelector(\r\n    `.aside__anchor[href=\"#${id}\"]`\r\n  )\r\n  const $item = $anchor.parentNode\r\n\r\n  if ($active) {\r\n    $active.classList.remove('active')\r\n  }\r\n\r\n  $item.classList.add('active')\r\n  $active = $item\r\n}\r\n\r\nconst setup = () => {\r\n  const $emitter = delegate($aside)\r\n\r\n  $observer.on('sync:anchor', onAsyncAnchor)\r\n  $emitter.click('.aside__anchor', onAnchorTrigger)\r\n}\r\n\r\nexport default {\r\n  setup\r\n}\r\n","import delegate from '../../delegate'\r\nimport $observer from '@yaohaixiao/subscribers.js/subscribers.core'\r\n\r\nconst $buttons = document.querySelector('#buttons')\r\n\r\nconst toggle = (top) => {\r\n  const $main = document.querySelector('#main')\r\n  const MIN = 0\r\n  const MAX = $main.scrollHeight\r\n  const $up = $buttons.querySelector('.up')\r\n  const $down = $buttons.querySelector('.down')\r\n\r\n  if (top <= MIN) {\r\n    $up.classList.add('hide')\r\n    $down.classList.remove('hide')\r\n  } else if (top >= MAX) {\r\n    $down.classList.add('hide')\r\n    $up.classList.remove('hide')\r\n  } else if (top > MIN && top < MAX) {\r\n    $up.classList.remove('hide')\r\n    $down.classList.remove('hide')\r\n  }\r\n}\r\n\r\nconst setup = () => {\r\n  const $emitter = delegate($buttons)\r\n\r\n  toggle(0)\r\n\r\n  $observer.on('buttons:toggle', toggle)\r\n\r\n  $emitter.click('.up', () => {\r\n    $observer.emit('scroll:to:top', 50)\r\n  })\r\n  $emitter.click('.down', () => {\r\n    $observer.emit('scroll:to:bottom', 50)\r\n  })\r\n}\r\n\r\nexport default {\r\n  setup\r\n}\r\n","import delegate from '../../delegate'\r\n\r\nlet options = [\r\n  {\r\n    id: 1,\r\n    text: 'Item-1'\r\n  },\r\n  {\r\n    id: 2,\r\n    text: 'Item-2'\r\n  },\r\n  {\r\n    id: 3,\r\n    text: 'Item-3'\r\n  },\r\n  {\r\n    id: 4,\r\n    text: 'Item-4'\r\n  },\r\n  {\r\n    id: 5,\r\n    text: 'Item-5'\r\n  },\r\n  {\r\n    id: 6,\r\n    text: 'Item-6'\r\n  },\r\n  {\r\n    id: 7,\r\n    text: 'Item-7'\r\n  },\r\n  {\r\n    id: 8,\r\n    text: 'Item-8'\r\n  },\r\n  {\r\n    id: 9,\r\n    text: 'Item-9'\r\n  },\r\n  {\r\n    id: 10,\r\n    text: 'Item-10'\r\n  }\r\n]\r\nlet isRemoveOn = true\r\nlet isItemOn = true\r\n\r\nconst $remove = document.querySelector('#action-remove')\r\nconst $item = document.querySelector('#action-item')\r\nconst $append = document.querySelector('#append')\r\nconst $list = document.querySelector('#list')\r\n// eslint-disable-next-line no-undef\r\nconst $emitter = delegate($list)\r\nconst $console = document.querySelector('#console')\r\nconst $log = document.querySelector('#log')\r\n// eslint-disable-next-line no-undef\r\nconst $provider = delegate($console)\r\n\r\nconst draw = () => {\r\n  let items = []\r\n\r\n  options.forEach((option) => {\r\n    const id = option.id\r\n    const name = encodeURIComponent(option.text)\r\n    const item =\r\n      `<li id=\"${'item-' + id}\" class=\"case__item\">` +\r\n      `<span class=\"case__label\">${name}</span>` +\r\n      `<a href=\"#list?id=${id}&amp;name=${name}\" class=\"case__remove\" data-id=\"${id}\">删除</a>` +\r\n      `</li>`\r\n\r\n    items.push(item)\r\n  })\r\n\r\n  $list.innerHTML = items.join('')\r\n}\r\n\r\nconst append = function () {\r\n  const length = options.length\r\n  const id = length > 0 ? options[length - 1].id + 1 : 1\r\n  const option = {id: id, text: `Item-${id}`}\r\n\r\n  options.push(option)\r\n\r\n  draw()\r\n\r\n  $log.value += `新添加的 li 节点的 id 为：'item-${id}'\\r`\r\n\r\n  scroll()\r\n}\r\n\r\nconst remove = function (evt) {\r\n  const $target = evt.delegateTarget\r\n  const id = parseInt($target.getAttribute('data-id'), 10)\r\n\r\n  options = options.filter((option) => id !== option.id)\r\n\r\n  draw()\r\n\r\n  $log.value += `click 事件触发，事件的 delegateTarget 为：'${$target}'\\r`\r\n  $log.value += `删除的 li 节点 id 为：'item-${id}'\\r`\r\n\r\n  $emitter.stopImmediate(evt)\r\n\r\n  scroll()\r\n}\r\n\r\nconst logMouseEnter = function (evt) {\r\n  const $target = $emitter.getRelatedTarget(evt)\r\n\r\n  if (!$target) {\r\n    return false\r\n  }\r\n\r\n  $log.value += `mouseenter 事件触发，事件的 relatedTarget 为：'${$target}'\\r`\r\n\r\n  scroll()\r\n}\r\n\r\nconst logClick = function (evt) {\r\n  const pageX = $emitter.getPageX(evt)\r\n  const pageY = $emitter.getPageY(evt)\r\n  const $target = evt.delegateTarget\r\n\r\n  if (!$target) {\r\n    return false\r\n  }\r\n\r\n  $log.value += `click 事件触发，当前点击的 li 节点的 id 为：'${$target.id}'\\r`\r\n  $log.value += `getPageX() 获取点击处的 pageX 为：'${pageX}'\\r`\r\n  $log.value += `getPageY() 获取点点击处的 pageY 为：'${pageY}'\\r`\r\n\r\n  scroll()\r\n}\r\n\r\nconst logTrigger = function (evt) {\r\n  const $target = evt.delegateTarget\r\n  const type = evt.type\r\n\r\n  if (!$target) {\r\n    return false\r\n  }\r\n\r\n  $log.value += `$emitter.trigger('log', '.case__item:nth-child(2)') 触发自定义 ${type} 事件\\r`\r\n  $log.value += `事件的 delegateTarget 为节点的 id 为：'${$target.id}'\\r`\r\n\r\n  scroll()\r\n}\r\n\r\nconst toggleRemove = () => {\r\n  isRemoveOn = !isRemoveOn\r\n\r\n  if (isRemoveOn) {\r\n    $log.value += `已恢复 .case__remove 事件代理绑定\\r`\r\n    $remove.innerHTML = '解除 .case__remove 绑定'\r\n    $emitter.click('.case__remove', remove)\r\n  } else {\r\n    $log.value += `已解除 .case__remove 事件代理绑定\\r`\r\n    $remove.innerHTML = '恢复 .case__remove 绑定'\r\n    $emitter.off('click', remove)\r\n  }\r\n\r\n  scroll()\r\n}\r\n\r\nconst toggleLog = () => {\r\n  isItemOn = !isItemOn\r\n\r\n  if (isItemOn) {\r\n    $log.value += `已恢复 .case__item 事件代理绑定\\r`\r\n    $item.innerHTML = '解除 .case__item 绑定'\r\n    $emitter.mouseenter('.case__item', logMouseEnter)\r\n    $emitter.on('.case__item', 'click', logClick)\r\n  } else {\r\n    $log.value += `已解除 .case__item 事件代理绑定\\r`\r\n    $item.innerHTML = '恢复 .case__item 绑定'\r\n    $emitter.purge('mouseenter')\r\n    $emitter.off('click', logClick)\r\n  }\r\n\r\n  scroll()\r\n}\r\n\r\nconst typeHandler = function (evt) {\r\n  const type = evt.type\r\n  const $target = evt.target\r\n\r\n  if (!$target) {\r\n    return false\r\n  }\r\n\r\n  $log.value += `${$target} 触发 ${type} 事件\\r`\r\n\r\n  scroll()\r\n}\r\n\r\nconst keyboardHandler = function (evt) {\r\n  const type = evt.type\r\n  const $target = evt.target\r\n  const charCode = $provider.getCharCode(evt)\r\n\r\n  if (!$target) {\r\n    return false\r\n  }\r\n\r\n  $log.value += `\\r${$target} 触发 ${type} 事件\\r`\r\n  $log.value += `事件的 charCode 是：${charCode}\\r`\r\n\r\n  scroll()\r\n}\r\n\r\nconst lastItemHandler = function (evt) {\r\n  const type = evt.type\r\n  const $target = evt.target\r\n\r\n  if (!$target) {\r\n    return false\r\n  }\r\n\r\n  $emitter.stopImmediate(evt)\r\n\r\n  $log.value += `$emitter.trigger('alert', '.case__item:last-child') 触发自定义 ${type} 事件\\r`\r\n  $log.value += `事件的 delegateTarget 为节点的 id 为：'${$target.id}'\\r`\r\n\r\n  scroll()\r\n}\r\n\r\nconst scroll = () => {\r\n  $log.scrollTop = $log.scrollHeight\r\n}\r\n\r\nconst setup = () => {\r\n  let types = []\r\n\r\n  // 动态绘制 ul 中的列表项\r\n  draw()\r\n\r\n  $list.addEventListener('click', logClick)\r\n\r\n  // 取消或恢复 .item 元素的代理事件\r\n  $item.addEventListener('click', toggleLog)\r\n  // 取消或恢复 .remove 元素的代理事件\r\n  $remove.addEventListener('click', toggleRemove)\r\n\r\n  // 绑定不同元素的代理事件\r\n  $emitter.mouseenter('.case__item', logMouseEnter)\r\n  $emitter.click('.case__remove', remove)\r\n  $emitter.on('.case__item', 'click', logClick)\r\n  $emitter.on('.case__item', 'log', logTrigger)\r\n\r\n  $emitter.on('.case__item', 'alert', lastItemHandler)\r\n  $emitter.on('.case__item', 'alert', typeHandler)\r\n\r\n  // 动态创建列表项\r\n  $append.addEventListener('click', append)\r\n\r\n  types = $emitter.getTypes()\r\n\r\n  $log.value += `getTypes() 获取 $emitter 绑定事件：'${types}'\\r`\r\n\r\n  $emitter.trigger('log', '.case__item:nth-child(2)')\r\n  $emitter.trigger('alert', '.case__item:last-child')\r\n\r\n  $provider.focusin('.case__textarea', typeHandler)\r\n  $provider.keyup('.case__textarea', keyboardHandler)\r\n\r\n  types = $provider.getTypes()\r\n\r\n  $log.value += `getTypes() 获取 $provider 绑定事件：'${types}'\\r`\r\n}\r\n\r\nexport default {\r\n  setup\r\n}\r\n","import scroller from './scroller'\r\nimport anchors from './anchors'\r\nimport buttons from './buttons'\r\nimport docs from './docs'\r\n\r\nscroller.setup()\r\nanchors.setup()\r\nbuttons.setup()\r\ndocs.setup()\r\n"],"names":["_subscribers","hasOwn","obj","prop","hasOwnProperty","Object","prototype","call","_hasDirectSubscribersFor","topic","length","has","isDirect","found","position","lastIndexOf","substring","_hasSubscribers","emit","data","async","execute","forEach","subscriber","message","val","toString","indexOf","isTypedArray","callback","deliver","setTimeout","guid","id","prefix","on","handler","token","subject","apply","push","_removeSubscriber","off","keys","execution","j","splice","_removeSubscriberByToken","subscribers","this","$main","document","querySelector","MAX","scrollHeight","timer","playing","scrollTo","top","speed","scrollTop","distance","step","Math","ceil","scroll","clearTimeout","$observer","onScrollToTop","onScrollToBottom","onScrollToMethod","method","$method","offsetTop","scroller","Observer","IntersectionObserver","entries","entry","intersectionRatio","target","getAttribute","root","rootMargin","querySelectorAll","section","observe","sync","createEvent","type","detail","bubbles","cancelable","CustomEvent","isString","isElement","el","nodeName","tagName","nodeType","getListeners","listeners","_listeners","filter","listener","CAPTURE_EVENTS","_off","fn","capture","_delegateListener","index","i","_delete","removeEventListener","purgeElement","recurse","$element","$children","childNodes","arguments","$child","isFunction","_typeof","at","context","once","evt","overrideContext","addEventListener","matches","selector","sel","replace","msMatchesSelector","getParentOrHost","host","parentNode","resolveTextNode","getTarget","delegateTarget","ctx","includeCTX","closest","isIE","agent","navigator","userAgent","match","getTypes","types","Set","getScroll","$body","documentElement","body","scrollXY","scrollLeft","getPageX","x","pageX","clientX","getPageY","y","pageY","clientY","getCharCode","code","keyCode","charCode","webkitKeymap","UA","test","isAppleSafari","preventDefault","stopPropagation","stopEvent","Emitter","constructor","$el","hasEvent","result","getPageXY","getRelatedTarget","relatedTarget","toElement","fromElement","purge","destroy","only","click","dbclick","mouseenter","mouseleave","mousedown","mouseup","mouseover","mousemove","mouseout","drag","dragend","dragenter","dragleave","dragover","dragstart","drop","wheel","contextmenu","focusin","FOCUSIN","focusout","FOCUSOUT","change","input","compositionstart","compositionupdate","compositionend","paste","copy","cut","keydown","keyup","error","trigger","dispatchEvent","stopImmediate","stopImmediatePropagation","delegate","$aside","$active","onAnchorTrigger","href","split","onAsyncAnchor","$item","classList","remove","add","anchors","$emitter","$buttons","toggle","$up","$down","buttons","options","text","isRemoveOn","isItemOn","$remove","$append","$list","$console","$log","$provider","draw","items","option","name","encodeURIComponent","item","innerHTML","join","append","value","$target","parseInt","logMouseEnter","logClick","logTrigger","toggleRemove","toggleLog","typeHandler","keyboardHandler","lastItemHandler","docs"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13]}