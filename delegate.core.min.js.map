{"version":3,"file":"delegate.core.min.js","sources":["utils/isString.js","utils/isElement.js","getListeners.js","enum.js","_off.js","_delete.js","purgeElement.js","utils/isFunction.js","utils/_typeof.js","off.js","matches.js","getParentOrHost.js","on.js","getTarget.js","resolveTextNode.js","closest.js","destroy.js","getTypes.js","createEvent.js","emitter.core.js","once.js","trigger.js","delegate.core.js"],"sourcesContent":["/**\r\n * 判断是否为 String 类型值\r\n * ========================================================================\r\n * @method isString\r\n * @param {*} val - （必须）待检测的字符串\r\n * @returns {Boolean}\r\n */\r\nconst isString = (val) => {\r\n  return typeof val === 'string'\r\n}\r\n\r\nexport default isString\r\n","/**\r\n * 检测是否为 HTMLElement 元素节点\r\n * ========================================================================\r\n * @method isElement\r\n * @param {*|HTMLElement} el - （必须）待检测的数据（DOM 元素）\r\n * @returns {Boolean}\r\n */\r\nconst isElement = (el) => {\r\n  return !!(el && el.nodeName && el.tagName && el.nodeType === 1)\r\n}\r\n\r\nexport default isElement\r\n","import isString from './utils/isString'\r\n\r\n/**\r\n * 获取 DOM 元素（type 事件类型）事件绑定信息\r\n * ========================================================================\r\n * 如果设置了事件类型 type， 则返回指定类型的事件绑定信息，否则返回所有事件绑定信息\r\n * ========================================================================\r\n * @methods getListeners\r\n * @param {HTMLElement} el - （必须）要获取事件绑定信息的 DOM 元素\r\n * @param {String} [type] - （可选）事件类型\r\n * @returns {Array} - 已绑定的事件信息\r\n */\r\nconst getListeners = (el, type) => {\r\n  let listeners = el._listeners || []\r\n\r\n  if (isString(type) && type) {\r\n    listeners = listeners.filter((listener) => {\r\n      return listener.type === type\r\n    })\r\n  }\r\n\r\n  return listeners\r\n}\r\n\r\nexport default getListeners\r\n","export const CAPTURE_EVENTS = [\r\n  'focusout',\r\n  'blur',\r\n  'focusin',\r\n  'focus',\r\n  'load',\r\n  'unload',\r\n  'mouseenter',\r\n  'mouseleave'\r\n]\r\n","import { CAPTURE_EVENTS } from './enum'\r\nimport _delete from './_delete'\r\n\r\n/**\r\n * （私有方法）取消 type 类型的代理事件绑定\r\n * ========================================================================\r\n * 如果没有设置 handler，则销毁 this.$options 绑定的所有符合 type 事件类型的事件绑定\r\n * ========================================================================\r\n * @method _off\r\n * @param {HTMLElement} el - （必须）取消事件绑定的 DOM 元素\r\n * @param {String} type - （必须）事件类型\r\n * @param {Function} fn - （必须）事件处理器回调函数\r\n * @private\r\n */\r\nconst _off = (el, type, fn) => {\r\n  const capture = CAPTURE_EVENTS.indexOf(type) > -1\r\n\r\n  /* istanbul ignore else */\r\n  if (fn._delegateListener) {\r\n    fn = fn._delegateListener\r\n    delete fn._delegateListener\r\n  }\r\n\r\n  // 移除缓存的 _listeners 数据\r\n  _delete(el, type, fn)\r\n\r\n  el.removeEventListener(type, fn, capture)\r\n}\r\n\r\nexport default _off\r\n","/**\r\n * 删除 DOM 元素缓存的 _listeners 数据\r\n * ========================================================================\r\n * @method _delete\r\n * @param {HTMLElement} el - 要删除 listener 的 DOM 元素\r\n * @param {String} type - 事件类型（名称）\r\n * @param {Function} [fn] - 事件处理器回调函数\r\n */\r\nconst _delete = function (el, type, fn) {\r\n  const listeners = el._listeners\r\n  let index = -1\r\n\r\n  if (listeners.length < 1) {\r\n    return false\r\n  }\r\n\r\n  // 移除缓存的 _listeners 数据\r\n  listeners.forEach((listener, i) => {\r\n    const handler = listener.fn\r\n\r\n    if (type === listener.type) {\r\n      index = i\r\n\r\n      if (handler === fn) {\r\n        index = i\r\n      }\r\n    }\r\n  })\r\n\r\n  /* istanbul ignore else */\r\n  if (index > -1) {\r\n    listeners.splice(index, 1)\r\n  }\r\n}\r\n\r\nexport default _delete\r\n","import isString from './utils/isString'\r\nimport isElement from './utils/isElement'\r\nimport getListeners from './getListeners'\r\nimport _off from './_off'\r\n\r\n/**\r\n * 销毁（type 类型的）代理事件绑定\r\n * ========================================================================\r\n * 1. 设置了事件类型 type，则销毁指定类型的事件绑定，否则清除所有代理事件绑定\r\n * 2. recurse 设置为 true，递归销毁子节点全部事件绑定\r\n * ========================================================================\r\n * @method purgeElement\r\n * @param {HTMLElement|String} el - （必须）DOM 元素或者其选择器\r\n * @param {String|Boolean} type - （必须）事件类型\r\n * @param {Boolean} [recurse] - （可选）是否递归销毁子节点所有事件绑定\r\n */\r\nconst purgeElement = function (el, type, recurse = false) {\r\n  const $element = isString(el) ? document.querySelector(el) : el\r\n  const $children = $element.childNodes\r\n  const listeners = getListeners($element, type)\r\n\r\n  listeners.forEach((listener) => {\r\n    _off($element, listener.type, listener.fn)\r\n  })\r\n\r\n  if (\r\n    (recurse || type === true || arguments.length === 1) &&\r\n    $element &&\r\n    $children\r\n  ) {\r\n    $children.forEach(($child) => {\r\n      if (isElement($child)) {\r\n        purgeElement($child, type, recurse)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport default purgeElement\r\n","import _typeof from './_typeof'\r\n\r\n/**\r\n * 检测测试数据是否为 Function 类型\r\n * ========================================================================\r\n * @method isFunction\r\n * @param {*} val - （必须）待检测的数据\r\n * @returns {boolean} 'val' 是 Function 类型返回 true，否则返回 false\r\n */\r\nconst isFunction = (val) => {\r\n  return typeof val === 'function' || _typeof(val) === '[object Function]'\r\n}\r\n\r\nexport default isFunction\r\n","/**\r\n * 返回检测数据调用 toString() 方法后的字符串，用以判断数据类型。\r\n * ========================================================================\r\n * @method _typeof\r\n * @param {*} val - （必须）待检测的数据\r\n * @returns {String}\r\n *\r\n * @example\r\n * _typeof({})\r\n * // => '[object Object]'\r\n *\r\n * _typeof(function(){})\r\n * // => '[object Function]'\r\n *\r\n * _typeof([])\r\n * // => '[object Array]'\r\n *\r\n * _typeof('')\r\n * // => '[object String]'\r\n *\r\n * _typeof(2)\r\n * // => '[object Number]'\r\n */\r\nconst _typeof = (val) => {\r\n  return Object.prototype.toString.apply(val)\r\n}\r\n\r\nexport default _typeof\r\n","import purgeElement from './purgeElement'\r\nimport isFunction from './utils/isFunction'\r\nimport _off from './_off'\r\n\r\n/**\r\n * 取消 type 类型的代理事件绑定\r\n * ========================================================================\r\n * 如果没有设置 handler，则销毁 this.$options 绑定的所有符合 type 事件类型的事件绑定\r\n * ========================================================================\r\n * @method off\r\n * @param {HTMLElement} el - （必须）取消事件绑定的 DOM 元素\r\n * @param {String} type - （必须）事件类型\r\n * @param {Function} [fn] - （可选）事件处理器回调函数\r\n */\r\nconst off = (el, type, fn) => {\r\n  // 如果不设置 fn 参数，默认清除 el 元素上绑定的所有事件处理器\r\n  if (!isFunction(fn)) {\r\n    return purgeElement(el, type)\r\n  }\r\n\r\n  _off(el, type, fn)\r\n}\r\n\r\nexport default off\r\n","/**\r\n * 获取 options 节点下匹配 selector 选择器的 DOM 节点\r\n * ========================================================================\r\n * Element.matches() 方法可以用来判断 DOM 元素是否与给定的选择器匹配，事件代理判断是\r\n * 否触发绑定的代理事件回调函数，关键就是使用 Element.matches() 辨别当前事件触发的目\r\n * 标 DOM 元素是否为事件代理所期望触发的目标。\r\n * ========================================================================\r\n * @method matches\r\n * @see https://developer.mozilla.org/en-US/docs/web/api/element/matches\r\n * @param {HTMLElement} el - （必须）DOM 元素\r\n * @param {String} selector - （必须）匹配 DOM 元素的选择器\r\n * @returns {Boolean}\r\n */\r\nconst matches = (el, selector = '') => {\r\n  const sel = selector.replace(/^>/i, '')\r\n\r\n  if (!selector || !sel || !el) {\r\n    return false\r\n  }\r\n\r\n  /* istanbul ignore else */\r\n  if (el.matches) {\r\n    return el.matches(sel)\r\n  } else if (el.msMatchesSelector) {\r\n    return el.msMatchesSelector(sel)\r\n  } else {\r\n    return false\r\n  }\r\n}\r\n\r\nexport default matches\r\n","/**\r\n * 获取 DOM 元素的父节点\r\n * ========================================================================\r\n * @method getParentOrHost\r\n * @param {*|HTMLElement} el - （必须）要获取父节点的 DOM 元素\r\n * @returns {*|HTMLElement}\r\n */\r\nconst getParentOrHost = (el) => {\r\n  return el.host && el !== document && el.host.nodeType\r\n    ? el.host\r\n    : el.parentNode\r\n}\r\n\r\nexport default getParentOrHost\r\n","import closest from './closest'\r\nimport off from './off'\r\nimport getTarget from './getTarget'\r\nimport { CAPTURE_EVENTS } from './enum'\r\n\r\n/**\r\n * 绑定代理事件\r\n * ========================================================================\r\n * @method on\r\n * @param {HTMLElement|String} el - （必须）绑定代理事件的 DOM 节点\r\n * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n * @param {String} type - （必须）事件类型\r\n * @param {Function} fn - （必须） 事件处理器回调函数\r\n * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\r\n * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向，\r\n * 当设置为 true 时，则事件处理器回调函数的 this 上下文指向为 data 对象\r\n * @param {Boolean} once - （可选）是否仅触发一次\r\n */\r\nconst on = (el, selector, type, fn, data, context, once = false) => {\r\n  // CAPTURE_EVENTS 中的特殊事件，采用事件捕获模型\r\n  const capture = CAPTURE_EVENTS.indexOf(type) > -1\r\n\r\n  const listener = function (evt) {\r\n    const target = getTarget(evt)\r\n    // 通过 Element.matches 方法获得点击的目标元素\r\n    const delegateTarget = closest(target, selector, el)\r\n    let overrideContext = context || el\r\n\r\n    evt.delegateTarget = delegateTarget\r\n\r\n    // 当设置为 true 时，则事件处理器回调函数的\r\n    // this 上下文指向为 data 对象\r\n    if (context === true) {\r\n      overrideContext = data\r\n    }\r\n\r\n    /* istanbul ignore else */\r\n    if (delegateTarget) {\r\n      // 仅触发一次\r\n      /* istanbul ignore else */\r\n      if (once === true) {\r\n        off(el, type, listener)\r\n      }\r\n\r\n      fn.call(overrideContext, evt, data)\r\n    }\r\n  }\r\n\r\n  if (!el._listeners) {\r\n    el._listeners = []\r\n  }\r\n\r\n  // 缓存 options 元素绑定的事件处理器\r\n  el._listeners.push({\r\n    el,\r\n    selector,\r\n    type,\r\n    fn: listener,\r\n    data,\r\n    context,\r\n    capture\r\n  })\r\n\r\n  // 缓存包装后的事件处理器\r\n  fn._delegateListener = listener\r\n\r\n  el.addEventListener(type, listener, capture)\r\n}\r\n\r\nexport default on\r\n","import resolveTextNode from './resolveTextNode'\r\n\r\n/**\r\n * 返回触发事件的 target DOM 元素\r\n * ========================================================================\r\n * @method getTarget\r\n * @param {Event} evt - Event 对象\r\n * @return {HTMLElement} - Event 对象的 target DOM 元素\r\n */\r\nconst getTarget = function (evt) {\r\n  const target = evt.target\r\n\r\n  return resolveTextNode(target)\r\n}\r\n\r\nexport default getTarget\r\n","/**\r\n * 在某些情况下，某些浏览器（例如：Safari 浏览器）会返回实际的目标元素内部的文本节点。\r\n * resolveTextNode() 方法则会返回实际的目标节点。\r\n * ========================================================================\r\n * @method resolveTextNode\r\n * @param {HTMLElement|Text} el - 要解析的节点\r\n * @return {*|HTMLElement} - 实际的目标 DOM 节点\r\n */\r\nconst resolveTextNode = function (el) {\r\n  if (el && el.nodeType === 3) {\r\n    return el.parentNode\r\n  }\r\n\r\n  return el\r\n}\r\n\r\nexport default resolveTextNode\r\n","import matches from './matches'\r\nimport getParentOrHost from './getParentOrHost'\r\n\r\n/**\r\n * 获取 options 元素父元素最近的包含 selector 选择器的元素\r\n * ========================================================================\r\n * @method closest\r\n * @param {HTMLElement} el - （必须）DOM 元素\r\n * @param {String} selector - （必须）DOM 元素的选择其\r\n * @param {HTMLElement} [ctx] - （必须）比对的 DOM 元素\r\n * @param {Boolean} [includeCTX] - （必须）是否包含 context DOM 元素\r\n * @returns {null|HTMLElement} - 返回最接近的 DOM 元素\r\n */\r\nconst closest = (el, selector, ctx, includeCTX) => {\r\n  const context = ctx || document\r\n\r\n  if (!el) {\r\n    return null\r\n  }\r\n\r\n  do {\r\n    /* istanbul ignore else */\r\n    if (\r\n      (selector != null &&\r\n        (selector[0] === '>'\r\n          ? el.parentNode === context && matches(el, selector)\r\n          : matches(el, selector))) ||\r\n      (includeCTX && el === context)\r\n    ) {\r\n      return el\r\n    }\r\n\r\n    /* istanbul ignore else */\r\n    if (el === context) {\r\n      break\r\n    }\r\n\r\n    /* jshint boss:true */\r\n  } while ((el = getParentOrHost(el)))\r\n}\r\n\r\nexport default closest\r\n","import getTypes from './getTypes'\r\nimport purgeElement from './purgeElement'\r\n\r\n/**\r\n * 销毁所有已绑定的代理事件\r\n * ========================================================================\r\n * @method destroy\r\n * @param {HTMLElement} el - 需要解除所有事件绑定的 DOM 元素\r\n * @returns {Emitter} - Emitter 对象\r\n */\r\nconst destroy = (el) => {\r\n  const types = getTypes(el)\r\n\r\n  types.forEach((type) => {\r\n    purgeElement(el, type, true)\r\n  })\r\n}\r\n\r\nexport default destroy\r\n","import getListeners from './getListeners'\r\n\r\n/**\r\n * 返回已绑定的事件类型的数组（去除名称重复的事件）\r\n * ========================================================================\r\n * @method getTypes\r\n * @returns {Array}\r\n */\r\nconst getTypes = (el) => {\r\n  const listeners = getListeners(el)\r\n  const types = []\r\n\r\n  listeners.forEach((listener) => {\r\n    types.push(listener.type)\r\n  })\r\n\r\n  return [...new Set(types)]\r\n}\r\n\r\nexport default getTypes\r\n","/**\r\n * 创建自定义事件（CustomerEvent）\r\n * ========================================================================\r\n * @method createEvent\r\n * @param {String} type - （必须）事件类型（名称）\r\n * @param {Object} [detail] - （可选）传递给自定义事件的数据，默认为 null\r\n * @param {Boolean} [bubbles] - （可选）是否支持冒泡，默认为 true\r\n * @param {Boolean} [cancelable] - （可选）是否可以取消，默认为 true\r\n * @returns {CustomEvent} - CustomerEvent 实例\r\n *\r\n * @example\r\n * <div id=\"nav\" class=\"nav\">\r\n *   <a id=\"service\" class=\"anchor\" href=\"https://www.yaohaixiao.com/serivce\">Service</a>\r\n *   <a id=\"help\" class=\"anchor\" href=\"https://www.yaohaixiao.com/help\">Help</a>\r\n * </div>\r\n *\r\n * const $nav = document.querySelector('#nav')\r\n * const logEvent = createEvent('log', {\r\n *   name: 'Yao',\r\n *   hi() {\r\n *     console.log('hi！！！')\r\n *   }\r\n * })\r\n *\r\n * const logHandler = function(evt) {\r\n *   console.log('detail', evt.detail)\r\n *   console.log('type', evt.type)\r\n * }\r\n *\r\n * $nav.addEventListener('log', logHandler)\r\n *\r\n * $nav.dispatchEvent(logEvent)\r\n */\r\nconst createEvent = (\r\n  type,\r\n  detail = null,\r\n  bubbles = true,\r\n  cancelable = true\r\n) => {\r\n  return new CustomEvent(type, {\r\n    detail: detail,\r\n    bubbles: bubbles,\r\n    cancelable: cancelable\r\n  })\r\n}\r\n\r\nexport default createEvent\r\n","import off from './off'\r\nimport on from './on'\r\nimport once from './once'\r\nimport isElement from './utils/isElement'\r\nimport isString from './utils/isString'\r\nimport purgeElement from './purgeElement'\r\nimport destroy from './destroy'\r\nimport trigger from './trigger'\r\nimport createEvent from './createEvent'\r\n\r\n/**\r\n * Emitter 类 - JavaScript 事件代理对象\r\n * ========================================================================\r\n */\r\nclass Emitter {\r\n  /**\r\n   * Emitter 构造函数\r\n   * ========================================================================\r\n   * @constructor\r\n   * @param {HTMLElement|String} el - （必须）DOM 元素或其选择器\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  constructor(el) {\r\n    if (isElement(el)) {\r\n      this.$el = el\r\n    } else {\r\n      if (isString(el)) {\r\n        this.$el = document.querySelector(el)\r\n      }\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 销毁（type 类型的）代理事件绑定\r\n   * ========================================================================\r\n   * 1. 设置了事件类型 type，则销毁指定类型的事件绑定，否则清除所有代理事件绑定\r\n   * 2. recurse 设置为 true，递归销毁子节点全部事件绑定\r\n   * ========================================================================\r\n   * @method purge\r\n   * @param {String} type  - （必须）事件类型\r\n   * @param {Boolean} [recurse]  - （可选）是否递归销毁子节点所有事件绑定\r\n   * 元素绑定的全部事件处理器\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  purge(type, recurse = false) {\r\n    purgeElement(this.$el, type, recurse)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 销毁所有已绑定的代理事件\r\n   * ========================================================================\r\n   * @method destroy\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  destroy() {\r\n    destroy(this.$el)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 取消 type 类型的代理事件绑定\r\n   * ========================================================================\r\n   * 如果没有设置 handler，则销毁 this.$options 绑定的所有符合 type 事件类型的事件绑定\r\n   * ========================================================================\r\n   * @method off\r\n   * @param {String} type - （必须）事件类型\r\n   * @param {Function} [handler] - （可选）事件处理器回调函数\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  off(type, handler) {\r\n    off(this.$el, type, handler)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绑定代理事件\r\n   * ========================================================================\r\n   * @method on\r\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n   * @param {String} type - （必须）事件类型\r\n   * @param {Function} handler - （必须） 事件处理器回调函数\r\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\r\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向：\r\n   * 当设置为 true 时，则事件处理器回调函数的 this 上下文指向为 data 对象；\r\n   * 如未指定 context，则事件处理器回调函数的 this 上下文指向为 Emitter 对象；\r\n   * @param {Boolean} [once] - （可选）是否仅触发一次\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  on(selector, type, handler, data, context, once = false) {\r\n    on(this.$el, selector, type, handler, data, context || this, once)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绑定仅触发一次的代理事件\r\n   * ========================================================================\r\n   * @method once\r\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n   * @param {String} type - （必须）事件类型\r\n   * @param {Function} handler - （必须） 事件处理器回调函数\r\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\r\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  once(selector, type, handler, data, context) {\r\n    once(this.$el, selector, type, handler, data, context)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绑定 click 代理事件\r\n   * ========================================================================\r\n   * @method click\r\n   * @since 1.4.0\r\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/Element/click_event\r\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n   * @param {Function} handler - （必须） 事件处理器回调函数\r\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\r\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\r\n   * @param {Boolean} [once] - （可选）是否仅触发一次\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  click(selector, handler, data, context, once = false) {\r\n    on(this.$el, selector, 'click', handler, data, context, once)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绑定 mousemove 代理事件\r\n   * ========================================================================\r\n   * @method mousemove\r\n   * @since 1.7.0\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event\r\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n   * @param {Function} handler - （必须） 事件处理器回调函数\r\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\r\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\r\n   * @param {Boolean} [once] - （可选）是否仅触发一次\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  mousemove(selector, handler, data, context, once = false) {\r\n    on(this.$el, selector, 'mousemove', handler, data, context, once)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绑定 mouseout 代理事件\r\n   * ========================================================================\r\n   * @method mouseout\r\n   * @since 1.7.0\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event\r\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n   * @param {Function} handler - （必须） 事件处理器回调函数\r\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\r\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\r\n   * @param {Boolean} [once] - （可选）是否仅触发一次\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  mouseout(selector, handler, data, context, once = false) {\r\n    on(this.$el, selector, 'mouseout', handler, data, context, once)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 绑定 change 代理事件\r\n   * ========================================================================\r\n   * @method change\r\n   * @since 1.7.0\r\n   * @see https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/change_event\r\n   * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n   * @param {Function} handler - （必须） 事件处理器回调函数\r\n   * @param {Object} [data] - （可选）传递给事件处理器回调函数的数据对象\r\n   * @param {Object|Boolean} [context] - （可选）事件处理器回调函数的 this 上下文指向\r\n   * @param {Boolean} [once] - （可选）是否仅触发一次\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  change(selector, handler, data, context, once = false) {\r\n    on(this.$el, selector, 'change', handler, data, context, once)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * 创建自定义事件（CustomerEvent）\r\n   * ========================================================================\r\n   * @method createEvent\r\n   * @since 1.8.0\r\n   * @see createEvent\r\n   * @param {String} type - （必须）事件类型（名称）\r\n   * @param {Object} [detail] - （可选）传递给自定义事件的数据，默认为 null\r\n   * @param {Boolean} [bubbles] - （可选）是否支持冒泡，默认为 true\r\n   * @param {Boolean} [cancelable] - （可选）是否可以取消，默认为 true\r\n   * @returns {CustomEvent} - CustomerEvent 实例\r\n   */\r\n  createEvent(type, detail = null, bubbles = true, cancelable = true) {\r\n    return createEvent(type, detail, bubbles, cancelable)\r\n  }\r\n\r\n  /**\r\n   * 触发代理自定义事件\r\n   * ========================================================================\r\n   * @method trigger\r\n   * @since 1.6.0\r\n   * @param {String} type - （必须）事件类型\r\n   * @param {String} selector - （必须）选择器\r\n   * @returns {Emitter} - Emitter 对象\r\n   */\r\n  trigger(type, selector) {\r\n    trigger(this.$el, type, selector)\r\n\r\n    return this\r\n  }\r\n}\r\n\r\nexport default Emitter\r\n","import on from './on'\r\n\r\n/**\r\n * 绑定只触发一次的事件\r\n * ========================================================================\r\n * @method once\r\n * @param {HTMLElement} el - （必须）绑定代理事件的 DOM 节点\r\n * @param {String} selector - （必须）事件代理目标 DOM 元素的选择器\r\n * @param {String} type - （必须）事件类型\r\n * @param {Function} fn - （必须） 事件处理器回调函数\r\n * @param {Object} data - （可选）传递给事件处理器回调函数的数据对象\r\n * @param {Object|Boolean} context - （可选）事件处理器回调函数的 this 上下文指向，\r\n * 当设置为 true 时，则事件处理器回调函数的 this 上下文指向为 data 对象\r\n */\r\nconst once = (el, selector, type, fn, data, context) => {\r\n  on(el, selector, type, fn, data, context, true)\r\n}\r\n\r\nexport default once\r\n","import createEvent from './createEvent'\r\n\r\n/**\r\n * 触发代理自定义事件\r\n * ========================================================================\r\n * trigger() 方法也可以用来手动触发内置的事件，例如 click, mouseenter 等事件，通常\r\n * 使用 trigger() 来手动触发用户自定义事件。\r\n *\r\n * 另外，选择器 selector 的匹配使用 document.querySelector() 方法，因此仅事件触发一次。\r\n * ========================================================================\r\n * @method trigger\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/CustomEvent\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/dispatchEvent\r\n * @param {HTMLElement} el - （必须）绑定代理事件的 DOM 元素\r\n * @param {String} type - （必须）事件类型\r\n * @param {String} selector - （必须）选择器\r\n *\r\n * @example\r\n * const $list = document.querySelector('#list')\r\n * // 绑定 alert 自定义事件\r\n * on($list, '.item', 'alert', itemHandler)\r\n * on($list, '.remove', 'alert', removeHandler)\r\n *\r\n * // 触发 $list 下匹配 '.item' 元素手动触发 alert 自定义事件\r\n * trigger('alert', '.item')\r\n *\r\n * // 可以使用伪类选择器，更精确的匹配元素\r\n * trigger('alert', '.item:last-child')\r\n *\r\n * // 触发 $list 下匹配 '.remove' 元素手动触发 alert 自定义事件\r\n * trigger('alert', '.remove')\r\n * trigger('alert', '.remove:nth-child(2)')\r\n */\r\nconst trigger = (el, type, selector) => {\r\n  let $child\r\n\r\n  if (!type || !selector) {\r\n    return false\r\n  }\r\n\r\n  $child = el.querySelector(selector)\r\n\r\n  if (!$child) {\r\n    return false\r\n  }\r\n\r\n  $child.dispatchEvent(createEvent(type))\r\n}\r\n\r\nexport default trigger\r\n","import Emitter from './emitter.core'\r\n\r\nconst delegate = (el) => {\r\n  return new Emitter(el)\r\n}\r\n\r\nexport default delegate\r\n"],"names":["isString","val","isElement","el","nodeName","tagName","nodeType","getListeners","type","listeners","_listeners","filter","listener","CAPTURE_EVENTS","_off","fn","capture","indexOf","_delegateListener","index","length","forEach","i","handler","splice","_delete","removeEventListener","purgeElement","recurse","$element","document","querySelector","$children","childNodes","arguments","$child","isFunction","Object","prototype","toString","apply","_typeof","off","matches","selector","sel","replace","msMatchesSelector","getParentOrHost","host","parentNode","on","data","context","once","evt","target","getTarget","delegateTarget","ctx","includeCTX","closest","overrideContext","call","push","addEventListener","destroy","types","Set","getTypes","createEvent","detail","bubbles","cancelable","CustomEvent","Emitter","constructor","this","$el","purge","click","mousemove","mouseout","change","trigger","dispatchEvent"],"mappings":"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"}